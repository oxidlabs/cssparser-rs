<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="83"><g><title>`0x7FFED924AF10 (1 samples, 1.20%)</title><rect x="0.0000%" y="613" width="1.2048%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>`0x7FFED92527D8 (1 samples, 1.20%)</title><rect x="1.2048%" y="565" width="1.2048%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="1.4548%" y="575.50"></text></g><g><title>`0x7FFED923EC12 (1 samples, 1.20%)</title><rect x="1.2048%" y="549" width="1.2048%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="1.4548%" y="559.50"></text></g><g><title>`0x7FFED92253D6 (1 samples, 1.20%)</title><rect x="1.2048%" y="533" width="1.2048%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="1.4548%" y="543.50"></text></g><g><title>`0x7FFED9293314 (1 samples, 1.20%)</title><rect x="1.2048%" y="517" width="1.2048%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="1.4548%" y="527.50"></text></g><g><title>`0x7FFED9214163 (1 samples, 1.20%)</title><rect x="2.4096%" y="517" width="1.2048%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="2.6596%" y="527.50"></text></g><g><title>`0x7FFED9225E76 (3 samples, 3.61%)</title><rect x="1.2048%" y="581" width="3.6145%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="3"/><text x="1.4548%" y="591.50">`0x7..</text></g><g><title>`0x7FFED92528AA (2 samples, 2.41%)</title><rect x="2.4096%" y="565" width="2.4096%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="2"/><text x="2.6596%" y="575.50">`0..</text></g><g><title>`0x7FFED92011EB (2 samples, 2.41%)</title><rect x="2.4096%" y="549" width="2.4096%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="2"/><text x="2.6596%" y="559.50">`0..</text></g><g><title>`0x7FFED92012AB (2 samples, 2.41%)</title><rect x="2.4096%" y="533" width="2.4096%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="2"/><text x="2.6596%" y="543.50">`0..</text></g><g><title>`0x7FFED9214255 (1 samples, 1.20%)</title><rect x="3.6145%" y="517" width="1.2048%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="3.8645%" y="527.50"></text></g><g><title>`0x7FFED92014A2 (1 samples, 1.20%)</title><rect x="4.8193%" y="421" width="1.2048%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="5.0693%" y="431.50"></text></g><g><title>`0x7FFED921A8F7 (1 samples, 1.20%)</title><rect x="4.8193%" y="405" width="1.2048%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="1"/><text x="5.0693%" y="415.50"></text></g><g><title>`0x7FFED921B139 (1 samples, 1.20%)</title><rect x="4.8193%" y="389" width="1.2048%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="5.0693%" y="399.50"></text></g><g><title>`0x7FFED9290B44 (1 samples, 1.20%)</title><rect x="4.8193%" y="373" width="1.2048%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="5.0693%" y="383.50"></text></g><g><title>`0x7FFED9218DC4 (2 samples, 2.41%)</title><rect x="4.8193%" y="453" width="2.4096%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="2"/><text x="5.0693%" y="463.50">`0..</text></g><g><title>`0x7FFED92012DF (2 samples, 2.41%)</title><rect x="4.8193%" y="437" width="2.4096%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="2"/><text x="5.0693%" y="447.50">`0..</text></g><g><title>`0x7FFED9201510 (1 samples, 1.20%)</title><rect x="6.0241%" y="421" width="1.2048%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="6.2741%" y="431.50"></text></g><g><title>`0x7FFED9200B2F (1 samples, 1.20%)</title><rect x="6.0241%" y="405" width="1.2048%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="6.2741%" y="415.50"></text></g><g><title>`0x7FFED921C8E8 (1 samples, 1.20%)</title><rect x="6.0241%" y="389" width="1.2048%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="6.2741%" y="399.50"></text></g><g><title>`0x7FFED9214BAB (1 samples, 1.20%)</title><rect x="6.0241%" y="373" width="1.2048%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="6.2741%" y="383.50"></text></g><g><title>`0x7FFED9214DF6 (1 samples, 1.20%)</title><rect x="6.0241%" y="357" width="1.2048%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="6.2741%" y="367.50"></text></g><g><title>`0x7FFED9215DB4 (1 samples, 1.20%)</title><rect x="6.0241%" y="341" width="1.2048%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="6.2741%" y="351.50"></text></g><g><title>`0x7FFED921D319 (1 samples, 1.20%)</title><rect x="6.0241%" y="325" width="1.2048%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="1"/><text x="6.2741%" y="335.50"></text></g><g><title>`0x7FFED921C744 (1 samples, 1.20%)</title><rect x="6.0241%" y="309" width="1.2048%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="1"/><text x="6.2741%" y="319.50"></text></g><g><title>`0x7FFED921C5BA (1 samples, 1.20%)</title><rect x="6.0241%" y="293" width="1.2048%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="1"/><text x="6.2741%" y="303.50"></text></g><g><title>`0x7FFED921C9BC (1 samples, 1.20%)</title><rect x="6.0241%" y="277" width="1.2048%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="6.2741%" y="287.50"></text></g><g><title>`0x7FFED92908A4 (1 samples, 1.20%)</title><rect x="6.0241%" y="261" width="1.2048%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="6.2741%" y="271.50"></text></g><g><title>`0x7FFED6C1BEA8 (3 samples, 3.61%)</title><rect x="4.8193%" y="549" width="3.6145%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="3"/><text x="5.0693%" y="559.50">`0x7..</text></g><g><title>`0x7FFED6C28FB1 (3 samples, 3.61%)</title><rect x="4.8193%" y="533" width="3.6145%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="3"/><text x="5.0693%" y="543.50">`0x7..</text></g><g><title>`0x7FFED6C21C03 (3 samples, 3.61%)</title><rect x="4.8193%" y="517" width="3.6145%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="3"/><text x="5.0693%" y="527.50">`0x7..</text></g><g><title>`0x7FFED686B732 (3 samples, 3.61%)</title><rect x="4.8193%" y="501" width="3.6145%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="3"/><text x="5.0693%" y="511.50">`0x7..</text></g><g><title>`0x7FFED921A74A (3 samples, 3.61%)</title><rect x="4.8193%" y="485" width="3.6145%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="3"/><text x="5.0693%" y="495.50">`0x7..</text></g><g><title>`0x7FFED92090CC (3 samples, 3.61%)</title><rect x="4.8193%" y="469" width="3.6145%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="3"/><text x="5.0693%" y="479.50">`0x7..</text></g><g><title>`0x7FFED9218E30 (1 samples, 1.20%)</title><rect x="7.2289%" y="453" width="1.2048%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="1"/><text x="7.4789%" y="463.50"></text></g><g><title>`0x7FFED921DB1D (1 samples, 1.20%)</title><rect x="7.2289%" y="437" width="1.2048%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="1"/><text x="7.4789%" y="447.50"></text></g><g><title>`0x7FFED925D460 (1 samples, 1.20%)</title><rect x="7.2289%" y="421" width="1.2048%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="1"/><text x="7.4789%" y="431.50"></text></g><g><title>`0x7FFED925D3EE (1 samples, 1.20%)</title><rect x="7.2289%" y="405" width="1.2048%" height="15" fill="rgb(245,192,40)" fg:x="6" fg:w="1"/><text x="7.4789%" y="415.50"></text></g><g><title>`0x7FFED925D63D (1 samples, 1.20%)</title><rect x="7.2289%" y="389" width="1.2048%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="1"/><text x="7.4789%" y="399.50"></text></g><g><title>`0x7FFED9218B8F (1 samples, 1.20%)</title><rect x="7.2289%" y="373" width="1.2048%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="1"/><text x="7.4789%" y="383.50"></text></g><g><title>`0x7FFED73F7BE7 (1 samples, 1.20%)</title><rect x="7.2289%" y="357" width="1.2048%" height="15" fill="rgb(231,60,39)" fg:x="6" fg:w="1"/><text x="7.4789%" y="367.50"></text></g><g><title>`0x7FFED73F7EE3 (1 samples, 1.20%)</title><rect x="7.2289%" y="341" width="1.2048%" height="15" fill="rgb(208,69,12)" fg:x="6" fg:w="1"/><text x="7.4789%" y="351.50"></text></g><g><title>`0x7FFED740C5A8 (1 samples, 1.20%)</title><rect x="7.2289%" y="325" width="1.2048%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="1"/><text x="7.4789%" y="335.50"></text></g><g><title>`0x7FFED68B2072 (1 samples, 1.20%)</title><rect x="7.2289%" y="309" width="1.2048%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="1"/><text x="7.4789%" y="319.50"></text></g><g><title>`0x7FFED92382E9 (1 samples, 1.20%)</title><rect x="7.2289%" y="293" width="1.2048%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="1"/><text x="7.4789%" y="303.50"></text></g><g><title>`0x7FFED9236AD6 (1 samples, 1.20%)</title><rect x="7.2289%" y="277" width="1.2048%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="1"/><text x="7.4789%" y="287.50"></text></g><g><title>`0x7FFED9290764 (1 samples, 1.20%)</title><rect x="7.2289%" y="261" width="1.2048%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="1"/><text x="7.4789%" y="271.50"></text></g><g><title>`0x7FFED6C1C099 (4 samples, 4.82%)</title><rect x="4.8193%" y="565" width="4.8193%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="4"/><text x="5.0693%" y="575.50">`0x7FF..</text></g><g><title>`0x7FFED6C1BED8 (1 samples, 1.20%)</title><rect x="8.4337%" y="549" width="1.2048%" height="15" fill="rgb(239,60,40)" fg:x="7" fg:w="1"/><text x="8.6837%" y="559.50"></text></g><g><title>`0x7FFED7547FCB (1 samples, 1.20%)</title><rect x="8.4337%" y="533" width="1.2048%" height="15" fill="rgb(206,27,48)" fg:x="7" fg:w="1"/><text x="8.6837%" y="543.50"></text></g><g><title>`0x7FFED924118D (1 samples, 1.20%)</title><rect x="8.4337%" y="517" width="1.2048%" height="15" fill="rgb(225,35,8)" fg:x="7" fg:w="1"/><text x="8.6837%" y="527.50"></text></g><g><title>`0x7FFED9241596 (1 samples, 1.20%)</title><rect x="8.4337%" y="501" width="1.2048%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="1"/><text x="8.6837%" y="511.50"></text></g><g><title>`0x7FFED9218B8F (1 samples, 1.20%)</title><rect x="8.4337%" y="485" width="1.2048%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="1"/><text x="8.6837%" y="495.50"></text></g><g><title>`0x7FFED73F7C7D (1 samples, 1.20%)</title><rect x="8.4337%" y="469" width="1.2048%" height="15" fill="rgb(231,138,38)" fg:x="7" fg:w="1"/><text x="8.6837%" y="479.50"></text></g><g><title>`0x7FFED742D7DB (1 samples, 1.20%)</title><rect x="8.4337%" y="453" width="1.2048%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="1"/><text x="8.6837%" y="463.50"></text></g><g><title>`0x7FFED742DBBD (1 samples, 1.20%)</title><rect x="8.4337%" y="437" width="1.2048%" height="15" fill="rgb(251,118,11)" fg:x="7" fg:w="1"/><text x="8.6837%" y="447.50"></text></g><g><title>`0x7FFED743CB20 (1 samples, 1.20%)</title><rect x="8.4337%" y="421" width="1.2048%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="1"/><text x="8.6837%" y="431.50"></text></g><g><title>`0x7FFED6C2521D (1 samples, 1.20%)</title><rect x="9.6386%" y="565" width="1.2048%" height="15" fill="rgb(247,81,37)" fg:x="8" fg:w="1"/><text x="9.8886%" y="575.50"></text></g><g><title>cssparser-rs.exe`pre_c_initialization() (1 samples, 1.20%)</title><rect x="9.6386%" y="549" width="1.2048%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="1"/><text x="9.8886%" y="559.50"></text></g><g><title>`0x7FFED6C2568B (1 samples, 1.20%)</title><rect x="9.6386%" y="533" width="1.2048%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="1"/><text x="9.8886%" y="543.50"></text></g><g><title>`0x7FFED6C22166 (1 samples, 1.20%)</title><rect x="9.6386%" y="517" width="1.2048%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="1"/><text x="9.8886%" y="527.50"></text></g><g><title>`0x7FFED689A5E0 (1 samples, 1.20%)</title><rect x="9.6386%" y="501" width="1.2048%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="1"/><text x="9.8886%" y="511.50"></text></g><g><title>`0x7FFED922B001 (1 samples, 1.20%)</title><rect x="10.8434%" y="325" width="1.2048%" height="15" fill="rgb(210,229,1)" fg:x="9" fg:w="1"/><text x="11.0934%" y="335.50"></text></g><g><title>`0x7FFED922C334 (1 samples, 1.20%)</title><rect x="10.8434%" y="309" width="1.2048%" height="15" fill="rgb(222,148,37)" fg:x="9" fg:w="1"/><text x="11.0934%" y="319.50"></text></g><g><title>`0x7FFED922A11C (1 samples, 1.20%)</title><rect x="10.8434%" y="293" width="1.2048%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="1"/><text x="11.0934%" y="303.50"></text></g><g><title>`0x7FFED9236AD6 (1 samples, 1.20%)</title><rect x="10.8434%" y="277" width="1.2048%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="1"/><text x="11.0934%" y="287.50"></text></g><g><title>`0x7FFED9290764 (1 samples, 1.20%)</title><rect x="10.8434%" y="261" width="1.2048%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="1"/><text x="11.0934%" y="271.50"></text></g><g><title>`0x7FFED922C334 (1 samples, 1.20%)</title><rect x="12.0482%" y="213" width="1.2048%" height="15" fill="rgb(213,79,30)" fg:x="10" fg:w="1"/><text x="12.2982%" y="223.50"></text></g><g><title>`0x7FFED922A86D (1 samples, 1.20%)</title><rect x="12.0482%" y="197" width="1.2048%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="1"/><text x="12.2982%" y="207.50"></text></g><g><title>`0x7FFED922C381 (1 samples, 1.20%)</title><rect x="13.2530%" y="213" width="1.2048%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="1"/><text x="13.5030%" y="223.50"></text></g><g><title>`0x7FFED9237B04 (2 samples, 2.41%)</title><rect x="14.4578%" y="197" width="2.4096%" height="15" fill="rgb(216,154,8)" fg:x="12" fg:w="2"/><text x="14.7078%" y="207.50">`0..</text></g><g><title>`0x7FFED9237C6B (2 samples, 2.41%)</title><rect x="14.4578%" y="181" width="2.4096%" height="15" fill="rgb(244,35,45)" fg:x="12" fg:w="2"/><text x="14.7078%" y="191.50">`0..</text></g><g><title>`0x7FFED922B001 (2 samples, 2.41%)</title><rect x="14.4578%" y="165" width="2.4096%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="2"/><text x="14.7078%" y="175.50">`0..</text></g><g><title>`0x7FFED922C334 (2 samples, 2.41%)</title><rect x="14.4578%" y="149" width="2.4096%" height="15" fill="rgb(240,54,50)" fg:x="12" fg:w="2"/><text x="14.7078%" y="159.50">`0..</text></g><g><title>`0x7FFED9229C18 (2 samples, 2.41%)</title><rect x="14.4578%" y="133" width="2.4096%" height="15" fill="rgb(233,84,52)" fg:x="12" fg:w="2"/><text x="14.7078%" y="143.50">`0..</text></g><g><title>`0x7FFED923500B (2 samples, 2.41%)</title><rect x="14.4578%" y="117" width="2.4096%" height="15" fill="rgb(207,117,47)" fg:x="12" fg:w="2"/><text x="14.7078%" y="127.50">`0..</text></g><g><title>`0x7FFED92368EA (2 samples, 2.41%)</title><rect x="14.4578%" y="101" width="2.4096%" height="15" fill="rgb(249,43,39)" fg:x="12" fg:w="2"/><text x="14.7078%" y="111.50">`0..</text></g><g><title>`0x7FFED9236998 (2 samples, 2.41%)</title><rect x="14.4578%" y="85" width="2.4096%" height="15" fill="rgb(209,38,44)" fg:x="12" fg:w="2"/><text x="14.7078%" y="95.50">`0..</text></g><g><title>`0x7FFED9236AD6 (2 samples, 2.41%)</title><rect x="14.4578%" y="69" width="2.4096%" height="15" fill="rgb(236,212,23)" fg:x="12" fg:w="2"/><text x="14.7078%" y="79.50">`0..</text></g><g><title>`0x7FFED9290764 (2 samples, 2.41%)</title><rect x="14.4578%" y="53" width="2.4096%" height="15" fill="rgb(242,79,21)" fg:x="12" fg:w="2"/><text x="14.7078%" y="63.50">`0..</text></g><g><title>`0x7FFED9229C18 (1 samples, 1.20%)</title><rect x="16.8675%" y="133" width="1.2048%" height="15" fill="rgb(211,96,35)" fg:x="14" fg:w="1"/><text x="17.1175%" y="143.50"></text></g><g><title>`0x7FFED923500B (1 samples, 1.20%)</title><rect x="16.8675%" y="117" width="1.2048%" height="15" fill="rgb(253,215,40)" fg:x="14" fg:w="1"/><text x="17.1175%" y="127.50"></text></g><g><title>`0x7FFED92368EA (1 samples, 1.20%)</title><rect x="16.8675%" y="101" width="1.2048%" height="15" fill="rgb(211,81,21)" fg:x="14" fg:w="1"/><text x="17.1175%" y="111.50"></text></g><g><title>`0x7FFED9236998 (1 samples, 1.20%)</title><rect x="16.8675%" y="85" width="1.2048%" height="15" fill="rgb(208,190,38)" fg:x="14" fg:w="1"/><text x="17.1175%" y="95.50"></text></g><g><title>`0x7FFED9236AD6 (1 samples, 1.20%)</title><rect x="16.8675%" y="69" width="1.2048%" height="15" fill="rgb(235,213,38)" fg:x="14" fg:w="1"/><text x="17.1175%" y="79.50"></text></g><g><title>`0x7FFED9290764 (1 samples, 1.20%)</title><rect x="16.8675%" y="53" width="1.2048%" height="15" fill="rgb(237,122,38)" fg:x="14" fg:w="1"/><text x="17.1175%" y="63.50"></text></g><g><title>`0x7FFED9229E3F (1 samples, 1.20%)</title><rect x="18.0723%" y="133" width="1.2048%" height="15" fill="rgb(244,218,35)" fg:x="15" fg:w="1"/><text x="18.3223%" y="143.50"></text></g><g><title>`0x7FFED92367BA (1 samples, 1.20%)</title><rect x="18.0723%" y="117" width="1.2048%" height="15" fill="rgb(240,68,47)" fg:x="15" fg:w="1"/><text x="18.3223%" y="127.50"></text></g><g><title>`0x7FFED92906A4 (1 samples, 1.20%)</title><rect x="18.0723%" y="101" width="1.2048%" height="15" fill="rgb(210,16,53)" fg:x="15" fg:w="1"/><text x="18.3223%" y="111.50"></text></g><g><title>`0x7FFED922B001 (7 samples, 8.43%)</title><rect x="12.0482%" y="229" width="8.4337%" height="15" fill="rgb(235,124,12)" fg:x="10" fg:w="7"/><text x="12.2982%" y="239.50">`0x7FFED922B..</text></g><g><title>`0x7FFED929D216 (5 samples, 6.02%)</title><rect x="14.4578%" y="213" width="6.0241%" height="15" fill="rgb(224,169,11)" fg:x="12" fg:w="5"/><text x="14.7078%" y="223.50">`0x7FFED..</text></g><g><title>`0x7FFED9237B75 (3 samples, 3.61%)</title><rect x="16.8675%" y="197" width="3.6145%" height="15" fill="rgb(250,166,2)" fg:x="14" fg:w="3"/><text x="17.1175%" y="207.50">`0x7..</text></g><g><title>`0x7FFED9237C6B (3 samples, 3.61%)</title><rect x="16.8675%" y="181" width="3.6145%" height="15" fill="rgb(242,216,29)" fg:x="14" fg:w="3"/><text x="17.1175%" y="191.50">`0x7..</text></g><g><title>`0x7FFED922B001 (3 samples, 3.61%)</title><rect x="16.8675%" y="165" width="3.6145%" height="15" fill="rgb(230,116,27)" fg:x="14" fg:w="3"/><text x="17.1175%" y="175.50">`0x7..</text></g><g><title>`0x7FFED922C334 (3 samples, 3.61%)</title><rect x="16.8675%" y="149" width="3.6145%" height="15" fill="rgb(228,99,48)" fg:x="14" fg:w="3"/><text x="17.1175%" y="159.50">`0x7..</text></g><g><title>`0x7FFED9229E9C (1 samples, 1.20%)</title><rect x="19.2771%" y="133" width="1.2048%" height="15" fill="rgb(253,11,6)" fg:x="16" fg:w="1"/><text x="19.5271%" y="143.50"></text></g><g><title>`0x7FFED92367BA (1 samples, 1.20%)</title><rect x="19.2771%" y="117" width="1.2048%" height="15" fill="rgb(247,143,39)" fg:x="16" fg:w="1"/><text x="19.5271%" y="127.50"></text></g><g><title>`0x7FFED92906A4 (1 samples, 1.20%)</title><rect x="19.2771%" y="101" width="1.2048%" height="15" fill="rgb(236,97,10)" fg:x="16" fg:w="1"/><text x="19.5271%" y="111.50"></text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place (9 samples, 10.84%)</title><rect x="10.8434%" y="389" width="10.8434%" height="15" fill="rgb(233,208,19)" fg:x="9" fg:w="9"/><text x="11.0934%" y="399.50">cssparser-rs.exe..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(std::collections::hash::map::HashMap&lt;smallvec::SmallVec&lt;array$ (9 samples, 10.84%)</title><rect x="10.8434%" y="373" width="10.8434%" height="15" fill="rgb(216,164,2)" fg:x="9" fg:w="9"/><text x="11.0934%" y="383.50">cssparser-rs.exe..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$ (9 samples, 10.84%)</title><rect x="10.8434%" y="357" width="10.8434%" height="15" fill="rgb(220,129,5)" fg:x="9" fg:w="9"/><text x="11.0934%" y="367.50">cssparser-rs.exe..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$ (9 samples, 10.84%)</title><rect x="10.8434%" y="341" width="10.8434%" height="15" fill="rgb(242,17,10)" fg:x="9" fg:w="9"/><text x="11.0934%" y="351.50">cssparser-rs.exe..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::impl$18::drop&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;(hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$ (8 samples, 9.64%)</title><rect x="12.0482%" y="325" width="9.6386%" height="15" fill="rgb(242,107,0)" fg:x="10" fg:w="8"/><text x="12.2982%" y="335.50">cssparser-rs.e..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::drop_inner_table (8 samples, 9.64%)</title><rect x="12.0482%" y="309" width="9.6386%" height="15" fill="rgb(251,28,31)" fg:x="10" fg:w="8"/><text x="12.2982%" y="319.50">cssparser-rs.e..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::drop_elements (8 samples, 9.64%)</title><rect x="12.0482%" y="293" width="9.6386%" height="15" fill="rgb(233,223,10)" fg:x="10" fg:w="8"/><text x="12.2982%" y="303.50">cssparser-rs.e..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::Bucket&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt; &gt;::drop (8 samples, 9.64%)</title><rect x="12.0482%" y="277" width="9.6386%" height="15" fill="rgb(215,21,27)" fg:x="10" fg:w="8"/><text x="12.2982%" y="287.50">cssparser-rs.e..</text></g><g><title>cssparser-rs.exe`core::ptr::mut_ptr::impl$0::drop_in_place(tuple$&lt;smallvec::SmallVec&lt;array$ (8 samples, 9.64%)</title><rect x="12.0482%" y="261" width="9.6386%" height="15" fill="rgb(232,23,21)" fg:x="10" fg:w="8"/><text x="12.2982%" y="271.50">cssparser-rs.e..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(tuple$&lt;smallvec::SmallVec&lt;array$ (8 samples, 9.64%)</title><rect x="12.0482%" y="245" width="9.6386%" height="15" fill="rgb(244,5,23)" fg:x="10" fg:w="8"/><text x="12.2982%" y="255.50">cssparser-rs.e..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place&lt;cssparser_rs::Properties&gt; (1 samples, 1.20%)</title><rect x="20.4819%" y="229" width="1.2048%" height="15" fill="rgb(226,81,46)" fg:x="17" fg:w="1"/><text x="20.7319%" y="239.50"></text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(std::collections::hash::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="20.4819%" y="213" width="1.2048%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="1"/><text x="20.7319%" y="223.50"></text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="20.4819%" y="197" width="1.2048%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="1"/><text x="20.7319%" y="207.50"></text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="20.4819%" y="181" width="1.2048%" height="15" fill="rgb(240,187,13)" fg:x="17" fg:w="1"/><text x="20.7319%" y="191.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::impl$18::drop(hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="20.4819%" y="165" width="1.2048%" height="15" fill="rgb(223,113,26)" fg:x="17" fg:w="1"/><text x="20.7319%" y="175.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 1.20%)</title><rect x="20.4819%" y="149" width="1.2048%" height="15" fill="rgb(206,192,2)" fg:x="17" fg:w="1"/><text x="20.7319%" y="159.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::drop_elements (1 samples, 1.20%)</title><rect x="20.4819%" y="133" width="1.2048%" height="15" fill="rgb(241,108,4)" fg:x="17" fg:w="1"/><text x="20.7319%" y="143.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::Bucket&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt; &gt;::drop (1 samples, 1.20%)</title><rect x="20.4819%" y="117" width="1.2048%" height="15" fill="rgb(247,173,49)" fg:x="17" fg:w="1"/><text x="20.7319%" y="127.50"></text></g><g><title>cssparser-rs.exe`core::ptr::mut_ptr::impl$0::drop_in_place(tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="20.4819%" y="101" width="1.2048%" height="15" fill="rgb(224,114,35)" fg:x="17" fg:w="1"/><text x="20.7319%" y="111.50"></text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="20.4819%" y="85" width="1.2048%" height="15" fill="rgb(245,159,27)" fg:x="17" fg:w="1"/><text x="20.7319%" y="95.50"></text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="20.4819%" y="69" width="1.2048%" height="15" fill="rgb(245,172,44)" fg:x="17" fg:w="1"/><text x="20.7319%" y="79.50"></text></g><g><title>cssparser-rs.exe`smallvec::impl$33::drop(smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="20.4819%" y="53" width="1.2048%" height="15" fill="rgb(236,23,11)" fg:x="17" fg:w="1"/><text x="20.7319%" y="63.50"></text></g><g><title>cssparser-rs.exe`smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;::spilled (1 samples, 1.20%)</title><rect x="20.4819%" y="37" width="1.2048%" height="15" fill="rgb(205,117,38)" fg:x="17" fg:w="1"/><text x="20.7319%" y="47.50"></text></g><g><title>cssparser-rs.exe`enum2$&lt;std::collections::hash::map::Entry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt; &gt;::or_insert_with(enum2$&lt;std::collections::hash::map::Entry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt; &gt;, smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; (*) (2 samples, 2.41%)</title><rect x="21.6867%" y="357" width="2.4096%" height="15" fill="rgb(237,72,25)" fg:x="18" fg:w="2"/><text x="21.9367%" y="367.50">cs..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::VacantEntry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt;::insert(std::collections::hash::map::VacantEntry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt;, smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (2 samples, 2.41%)</title><rect x="21.6867%" y="341" width="2.4096%" height="15" fill="rgb(244,70,9)" fg:x="18" fg:w="2"/><text x="21.9367%" y="351.50">cs..</text></g><g><title>cssparser-rs.exe`hashbrown::rustc_entry::RustcVacantEntry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,alloc::alloc::Global&gt;::insert(hashbrown::rustc_entry::RustcVacantEntry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,alloc::alloc::Global&gt;, smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (2 samples, 2.41%)</title><rect x="21.6867%" y="325" width="2.4096%" height="15" fill="rgb(217,125,39)" fg:x="18" fg:w="2"/><text x="21.9367%" y="335.50">cs..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt;,alloc::alloc::Global&gt;::insert_no_grow(unsigned long long, tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (2 samples, 2.41%)</title><rect x="21.6867%" y="309" width="2.4096%" height="15" fill="rgb(235,36,10)" fg:x="18" fg:w="2"/><text x="21.9367%" y="319.50">cs..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::Bucket&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt; &gt;::write(tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (2 samples, 2.41%)</title><rect x="21.6867%" y="293" width="2.4096%" height="15" fill="rgb(251,123,47)" fg:x="18" fg:w="2"/><text x="21.9367%" y="303.50">cs..</text></g><g><title>cssparser-rs.exe`core::ptr::mut_ptr::impl$0::write(tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt;*, tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (2 samples, 2.41%)</title><rect x="21.6867%" y="277" width="2.4096%" height="15" fill="rgb(221,13,13)" fg:x="18" fg:w="2"/><text x="21.9367%" y="287.50">cs..</text></g><g><title>cssparser-rs.exe`core::ptr::write(tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt;*, tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (2 samples, 2.41%)</title><rect x="21.6867%" y="261" width="2.4096%" height="15" fill="rgb(238,131,9)" fg:x="18" fg:w="2"/><text x="21.9367%" y="271.50">cs..</text></g><g><title>`0x7FFEC4B6168D (1 samples, 1.20%)</title><rect x="22.8916%" y="245" width="1.2048%" height="15" fill="rgb(211,50,8)" fg:x="19" fg:w="1"/><text x="23.1416%" y="255.50"></text></g><g><title>cssparser-rs.exe`smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;::from_slice(ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="24.0964%" y="357" width="1.2048%" height="15" fill="rgb(245,182,24)" fg:x="20" fg:w="1"/><text x="24.3464%" y="367.50"></text></g><g><title>`0x7FFEC4B61467 (1 samples, 1.20%)</title><rect x="24.0964%" y="341" width="1.2048%" height="15" fill="rgb(242,14,37)" fg:x="20" fg:w="1"/><text x="24.3464%" y="351.50"></text></g><g><title>cssparser-rs.exe`core::intrinsics::copy_nonoverlapping (1 samples, 1.20%)</title><rect x="25.3012%" y="229" width="1.2048%" height="15" fill="rgb(246,228,12)" fg:x="21" fg:w="1"/><text x="25.5512%" y="239.50"></text></g><g><title>`0x7FFEC4B615D3 (1 samples, 1.20%)</title><rect x="25.3012%" y="213" width="1.2048%" height="15" fill="rgb(213,55,15)" fg:x="21" fg:w="1"/><text x="25.5512%" y="223.50"></text></g><g><title>`0x7FFED922D900 (1 samples, 1.20%)</title><rect x="26.5060%" y="149" width="1.2048%" height="15" fill="rgb(209,9,3)" fg:x="22" fg:w="1"/><text x="26.7560%" y="159.50"></text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::reserve (15 samples, 18.07%)</title><rect x="25.3012%" y="309" width="18.0723%" height="15" fill="rgb(230,59,30)" fg:x="21" fg:w="15"/><text x="25.5512%" y="319.50">cssparser-rs.exe`hashbrown::..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (15 samples, 18.07%)</title><rect x="25.3012%" y="293" width="18.0723%" height="15" fill="rgb(209,121,21)" fg:x="21" fg:w="15"/><text x="25.5512%" y="303.50">cssparser-rs.exe`hashbrown::..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (15 samples, 18.07%)</title><rect x="25.3012%" y="277" width="18.0723%" height="15" fill="rgb(220,109,13)" fg:x="21" fg:w="15"/><text x="25.5512%" y="287.50">cssparser-rs.exe`hashbrown::..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (15 samples, 18.07%)</title><rect x="25.3012%" y="261" width="18.0723%" height="15" fill="rgb(232,18,1)" fg:x="21" fg:w="15"/><text x="25.5512%" y="271.50">cssparser-rs.exe`hashbrown::..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (15 samples, 18.07%)</title><rect x="25.3012%" y="245" width="18.0723%" height="15" fill="rgb(215,41,42)" fg:x="21" fg:w="15"/><text x="25.5512%" y="255.50">cssparser-rs.exe`hashbrown::..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::prepare_resize (14 samples, 16.87%)</title><rect x="26.5060%" y="229" width="16.8675%" height="15" fill="rgb(224,123,36)" fg:x="22" fg:w="14"/><text x="26.7560%" y="239.50">cssparser-rs.exe`hashbrown..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::fallible_with_capacity (14 samples, 16.87%)</title><rect x="26.5060%" y="213" width="16.8675%" height="15" fill="rgb(240,125,3)" fg:x="22" fg:w="14"/><text x="26.7560%" y="223.50">cssparser-rs.exe`hashbrown..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::new_uninitialized (14 samples, 16.87%)</title><rect x="26.5060%" y="197" width="16.8675%" height="15" fill="rgb(205,98,50)" fg:x="22" fg:w="14"/><text x="26.7560%" y="207.50">cssparser-rs.exe`hashbrown..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::alloc::inner::do_alloc (14 samples, 16.87%)</title><rect x="26.5060%" y="181" width="16.8675%" height="15" fill="rgb(205,185,37)" fg:x="22" fg:w="14"/><text x="26.7560%" y="191.50">cssparser-rs.exe`hashbrown..</text></g><g><title>`0x7FFED922CCAA (14 samples, 16.87%)</title><rect x="26.5060%" y="165" width="16.8675%" height="15" fill="rgb(238,207,15)" fg:x="22" fg:w="14"/><text x="26.7560%" y="175.50">`0x7FFED922CCAA</text></g><g><title>`0x7FFED922DBCF (13 samples, 15.66%)</title><rect x="27.7108%" y="149" width="15.6627%" height="15" fill="rgb(213,199,42)" fg:x="23" fg:w="13"/><text x="27.9608%" y="159.50">`0x7FFED922DBCF</text></g><g><title>`0x7FFED9231931 (13 samples, 15.66%)</title><rect x="27.7108%" y="133" width="15.6627%" height="15" fill="rgb(235,201,11)" fg:x="23" fg:w="13"/><text x="27.9608%" y="143.50">`0x7FFED9231931</text></g><g><title>cssparser-rs.exe`cssparser_rs::Properties::insert(ref$&lt;slice2$&lt;u8&gt; &gt;, enum2$&lt;core::option::Option&lt;ref$&lt;slice2$ (19 samples, 22.89%)</title><rect x="21.6867%" y="373" width="22.8916%" height="15" fill="rgb(207,46,11)" fg:x="18" fg:w="19"/><text x="21.9367%" y="383.50">cssparser-rs.exe`cssparser_rs::Prope..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,std::hash::random::RandomState&gt;::entry(smallvec::SmallVec&lt;array$ (16 samples, 19.28%)</title><rect x="25.3012%" y="357" width="19.2771%" height="15" fill="rgb(241,35,35)" fg:x="21" fg:w="16"/><text x="25.5512%" y="367.50">cssparser-rs.exe`std::collecti..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::map_entry(enum2$&lt;hashbrown::rustc_entry::RustcEntry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (16 samples, 19.28%)</title><rect x="25.3012%" y="341" width="19.2771%" height="15" fill="rgb(243,32,47)" fg:x="21" fg:w="16"/><text x="25.5512%" y="351.50">cssparser-rs.exe`std::collecti..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::rustc_entry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;(smallvec::SmallVec&lt;array$ (16 samples, 19.28%)</title><rect x="25.3012%" y="325" width="19.2771%" height="15" fill="rgb(247,202,23)" fg:x="21" fg:w="16"/><text x="25.5512%" y="335.50">cssparser-rs.exe`hashbrown::ma..</text></g><g><title>cssparser-rs.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="43.3735%" y="309" width="1.2048%" height="15" fill="rgb(219,102,11)" fg:x="36" fg:w="1"/><text x="43.6235%" y="319.50"></text></g><g><title>cssparser-rs.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt; &gt; &gt;(std::hash::random::RandomState*, smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="43.3735%" y="293" width="1.2048%" height="15" fill="rgb(243,110,44)" fg:x="36" fg:w="1"/><text x="43.6235%" y="303.50"></text></g><g><title>cssparser-rs.exe`std::hash::random::impl$4::finish (1 samples, 1.20%)</title><rect x="43.3735%" y="277" width="1.2048%" height="15" fill="rgb(222,74,54)" fg:x="36" fg:w="1"/><text x="43.6235%" y="287.50"></text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$4::finish (1 samples, 1.20%)</title><rect x="43.3735%" y="261" width="1.2048%" height="15" fill="rgb(216,99,12)" fg:x="36" fg:w="1"/><text x="43.6235%" y="271.50"></text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1 samples, 1.20%)</title><rect x="43.3735%" y="245" width="1.2048%" height="15" fill="rgb(226,22,26)" fg:x="36" fg:w="1"/><text x="43.6235%" y="255.50"></text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$8::c_rounds (1 samples, 1.20%)</title><rect x="43.3735%" y="229" width="1.2048%" height="15" fill="rgb(217,163,10)" fg:x="36" fg:w="1"/><text x="43.6235%" y="239.50"></text></g><g><title>cssparser-rs.exe`core::num::impl$9::rotate_left (1 samples, 1.20%)</title><rect x="43.3735%" y="213" width="1.2048%" height="15" fill="rgb(213,25,53)" fg:x="36" fg:w="1"/><text x="43.6235%" y="223.50"></text></g><g><title>cssparser-rs.exe`cssparser_rs::Parser::add_property(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$&lt;u8&gt; &gt;, enum2$&lt;core::option::Option&lt;ref$&lt;slice2$ (20 samples, 24.10%)</title><rect x="21.6867%" y="389" width="24.0964%" height="15" fill="rgb(252,105,26)" fg:x="18" fg:w="20"/><text x="21.9367%" y="399.50">cssparser-rs.exe`cssparser_rs::Parser:..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState&gt;::get_mut(smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="44.5783%" y="373" width="1.2048%" height="15" fill="rgb(220,39,43)" fg:x="37" fg:w="1"/><text x="44.8283%" y="383.50"></text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_mut(smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="44.5783%" y="357" width="1.2048%" height="15" fill="rgb(229,68,48)" fg:x="37" fg:w="1"/><text x="44.8283%" y="367.50"></text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner_mut(smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="44.5783%" y="341" width="1.2048%" height="15" fill="rgb(252,8,32)" fg:x="37" fg:w="1"/><text x="44.8283%" y="351.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="44.5783%" y="325" width="1.2048%" height="15" fill="rgb(223,20,43)" fg:x="37" fg:w="1"/><text x="44.8283%" y="335.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="44.5783%" y="309" width="1.2048%" height="15" fill="rgb(229,81,49)" fg:x="37" fg:w="1"/><text x="44.8283%" y="319.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (1 samples, 1.20%)</title><rect x="44.5783%" y="293" width="1.2048%" height="15" fill="rgb(236,28,36)" fg:x="37" fg:w="1"/><text x="44.8283%" y="303.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="44.5783%" y="277" width="1.2048%" height="15" fill="rgb(249,185,26)" fg:x="37" fg:w="1"/><text x="44.8283%" y="287.50"></text></g><g><title>cssparser-rs.exe`hashbrown::map::equivalent_key::closure$0(hashbrown::map::equivalent_key::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;*, tuple$&lt;smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="44.5783%" y="261" width="1.2048%" height="15" fill="rgb(249,174,33)" fg:x="37" fg:w="1"/><text x="44.8283%" y="271.50"></text></g><g><title>cssparser-rs.exe`hashbrown::impl$0::equivalent(smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;*, smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="44.5783%" y="245" width="1.2048%" height="15" fill="rgb(233,201,37)" fg:x="37" fg:w="1"/><text x="44.8283%" y="255.50"></text></g><g><title>cssparser-rs.exe`core::cmp::impls::impl$9::eq(smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;**, smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="44.5783%" y="229" width="1.2048%" height="15" fill="rgb(221,78,26)" fg:x="37" fg:w="1"/><text x="44.8283%" y="239.50"></text></g><g><title>cssparser-rs.exe`smallvec::impl$35::eq(smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;*, smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="44.5783%" y="213" width="1.2048%" height="15" fill="rgb(250,127,30)" fg:x="37" fg:w="1"/><text x="44.8283%" y="223.50"></text></g><g><title>cssparser-rs.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="44.5783%" y="197" width="1.2048%" height="15" fill="rgb(230,49,44)" fg:x="37" fg:w="1"/><text x="44.8283%" y="207.50"></text></g><g><title>cssparser-rs.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="44.5783%" y="181" width="1.2048%" height="15" fill="rgb(229,67,23)" fg:x="37" fg:w="1"/><text x="44.8283%" y="191.50"></text></g><g><title>`0x7FFEC4B6131B (1 samples, 1.20%)</title><rect x="44.5783%" y="165" width="1.2048%" height="15" fill="rgb(249,83,47)" fg:x="37" fg:w="1"/><text x="44.8283%" y="175.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::Bucket&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt; &gt;::write(tuple$&lt;smallvec::SmallVec&lt;array$ (3 samples, 3.61%)</title><rect x="45.7831%" y="309" width="3.6145%" height="15" fill="rgb(215,43,3)" fg:x="38" fg:w="3"/><text x="46.0331%" y="319.50">cssp..</text></g><g><title>cssparser-rs.exe`core::ptr::mut_ptr::impl$0::write(tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;*, tuple$&lt;smallvec::SmallVec&lt;array$ (3 samples, 3.61%)</title><rect x="45.7831%" y="293" width="3.6145%" height="15" fill="rgb(238,154,13)" fg:x="38" fg:w="3"/><text x="46.0331%" y="303.50">cssp..</text></g><g><title>cssparser-rs.exe`core::ptr::write(tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;*, tuple$&lt;smallvec::SmallVec&lt;array$ (3 samples, 3.61%)</title><rect x="45.7831%" y="277" width="3.6145%" height="15" fill="rgb(219,56,2)" fg:x="38" fg:w="3"/><text x="46.0331%" y="287.50">cssp..</text></g><g><title>cssparser-rs.exe`enum2$&lt;std::collections::hash::map::Entry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt; &gt;::or_insert_with(enum2$&lt;std::collections::hash::map::Entry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt; &gt;, cssparser_rs::Properties (*) (4 samples, 4.82%)</title><rect x="45.7831%" y="373" width="4.8193%" height="15" fill="rgb(233,0,4)" fg:x="38" fg:w="4"/><text x="46.0331%" y="383.50">csspar..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::VacantEntry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;::insert(std::collections::hash::map::VacantEntry&lt;smallvec::SmallVec&lt;array$ (4 samples, 4.82%)</title><rect x="45.7831%" y="357" width="4.8193%" height="15" fill="rgb(235,30,7)" fg:x="38" fg:w="4"/><text x="46.0331%" y="367.50">csspar..</text></g><g><title>cssparser-rs.exe`hashbrown::rustc_entry::RustcVacantEntry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,alloc::alloc::Global&gt;::insert(hashbrown::rustc_entry::RustcVacantEntry&lt;smallvec::SmallVec&lt;array$ (4 samples, 4.82%)</title><rect x="45.7831%" y="341" width="4.8193%" height="15" fill="rgb(250,79,13)" fg:x="38" fg:w="4"/><text x="46.0331%" y="351.50">csspar..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::insert_no_grow(unsigned long long, tuple$&lt;smallvec::SmallVec&lt;array$ (4 samples, 4.82%)</title><rect x="45.7831%" y="325" width="4.8193%" height="15" fill="rgb(211,146,34)" fg:x="38" fg:w="4"/><text x="46.0331%" y="335.50">csspar..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 1.20%)</title><rect x="49.3976%" y="309" width="1.2048%" height="15" fill="rgb(228,22,38)" fg:x="41" fg:w="1"/><text x="49.6476%" y="319.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 1.20%)</title><rect x="49.3976%" y="293" width="1.2048%" height="15" fill="rgb(235,168,5)" fg:x="41" fg:w="1"/><text x="49.6476%" y="303.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 1.20%)</title><rect x="49.3976%" y="277" width="1.2048%" height="15" fill="rgb(221,155,16)" fg:x="41" fg:w="1"/><text x="49.6476%" y="287.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 1.20%)</title><rect x="49.3976%" y="261" width="1.2048%" height="15" fill="rgb(215,215,53)" fg:x="41" fg:w="1"/><text x="49.6476%" y="271.50"></text></g><g><title>cssparser-rs.exe`hashbrown::control::tag::Tag::is_full (1 samples, 1.20%)</title><rect x="49.3976%" y="245" width="1.2048%" height="15" fill="rgb(223,4,10)" fg:x="41" fg:w="1"/><text x="49.6476%" y="255.50"></text></g><g><title>`0x7FFEC4B615D3 (11 samples, 13.25%)</title><rect x="50.6024%" y="229" width="13.2530%" height="15" fill="rgb(234,103,6)" fg:x="42" fg:w="11"/><text x="50.8524%" y="239.50">`0x7FFEC4B615D3</text></g><g><title>`0x7FFEC4B615D7 (2 samples, 2.41%)</title><rect x="63.8554%" y="229" width="2.4096%" height="15" fill="rgb(227,97,0)" fg:x="53" fg:w="2"/><text x="64.1054%" y="239.50">`0..</text></g><g><title>`0x7FFEC4B61606 (1 samples, 1.20%)</title><rect x="66.2651%" y="229" width="1.2048%" height="15" fill="rgb(234,150,53)" fg:x="55" fg:w="1"/><text x="66.5151%" y="239.50"></text></g><g><title>cssparser-rs.exe`core::intrinsics::copy_nonoverlapping (15 samples, 18.07%)</title><rect x="50.6024%" y="245" width="18.0723%" height="15" fill="rgb(228,201,54)" fg:x="42" fg:w="15"/><text x="50.8524%" y="255.50">cssparser-rs.exe`core::intri..</text></g><g><title>`0x7FFEC4B6161E (1 samples, 1.20%)</title><rect x="67.4699%" y="229" width="1.2048%" height="15" fill="rgb(222,22,37)" fg:x="56" fg:w="1"/><text x="67.7199%" y="239.50"></text></g><g><title>`0x7FFED9229C18 (1 samples, 1.20%)</title><rect x="68.6747%" y="117" width="1.2048%" height="15" fill="rgb(237,53,32)" fg:x="57" fg:w="1"/><text x="68.9247%" y="127.50"></text></g><g><title>`0x7FFED923500B (1 samples, 1.20%)</title><rect x="68.6747%" y="101" width="1.2048%" height="15" fill="rgb(233,25,53)" fg:x="57" fg:w="1"/><text x="68.9247%" y="111.50"></text></g><g><title>`0x7FFED92368EA (1 samples, 1.20%)</title><rect x="68.6747%" y="85" width="1.2048%" height="15" fill="rgb(210,40,34)" fg:x="57" fg:w="1"/><text x="68.9247%" y="95.50"></text></g><g><title>`0x7FFED9236998 (1 samples, 1.20%)</title><rect x="68.6747%" y="69" width="1.2048%" height="15" fill="rgb(241,220,44)" fg:x="57" fg:w="1"/><text x="68.9247%" y="79.50"></text></g><g><title>`0x7FFED9236AD6 (1 samples, 1.20%)</title><rect x="68.6747%" y="53" width="1.2048%" height="15" fill="rgb(235,28,35)" fg:x="57" fg:w="1"/><text x="68.9247%" y="63.50"></text></g><g><title>`0x7FFED9290764 (1 samples, 1.20%)</title><rect x="68.6747%" y="37" width="1.2048%" height="15" fill="rgb(210,56,17)" fg:x="57" fg:w="1"/><text x="68.9247%" y="47.50"></text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::impl$12::prepare_resize::closure_env$0 (3 samples, 3.61%)</title><rect x="68.6747%" y="245" width="3.6145%" height="15" fill="rgb(224,130,29)" fg:x="57" fg:w="3"/><text x="68.9247%" y="255.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::scopeguard::impl$3::drop(hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::impl$12::prepare_resize::closure_env$0 (3 samples, 3.61%)</title><rect x="68.6747%" y="229" width="3.6145%" height="15" fill="rgb(235,212,8)" fg:x="57" fg:w="3"/><text x="68.9247%" y="239.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::impl$12::prepare_resize::closure$0(hashbrown::raw::impl$12::prepare_resize::closure_env$0 (3 samples, 3.61%)</title><rect x="68.6747%" y="213" width="3.6145%" height="15" fill="rgb(223,33,50)" fg:x="57" fg:w="3"/><text x="68.9247%" y="223.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::free_buckets (3 samples, 3.61%)</title><rect x="68.6747%" y="197" width="3.6145%" height="15" fill="rgb(219,149,13)" fg:x="57" fg:w="3"/><text x="68.9247%" y="207.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (3 samples, 3.61%)</title><rect x="68.6747%" y="181" width="3.6145%" height="15" fill="rgb(250,156,29)" fg:x="57" fg:w="3"/><text x="68.9247%" y="191.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::alloc::dealloc (3 samples, 3.61%)</title><rect x="68.6747%" y="165" width="3.6145%" height="15" fill="rgb(216,193,19)" fg:x="57" fg:w="3"/><text x="68.9247%" y="175.50">cssp..</text></g><g><title>`0x7FFED922B001 (3 samples, 3.61%)</title><rect x="68.6747%" y="149" width="3.6145%" height="15" fill="rgb(216,135,14)" fg:x="57" fg:w="3"/><text x="68.9247%" y="159.50">`0x7..</text></g><g><title>`0x7FFED922C334 (3 samples, 3.61%)</title><rect x="68.6747%" y="133" width="3.6145%" height="15" fill="rgb(241,47,5)" fg:x="57" fg:w="3"/><text x="68.9247%" y="143.50">`0x7..</text></g><g><title>`0x7FFED922A11C (2 samples, 2.41%)</title><rect x="69.8795%" y="117" width="2.4096%" height="15" fill="rgb(233,42,35)" fg:x="58" fg:w="2"/><text x="70.1295%" y="127.50">`0..</text></g><g><title>`0x7FFED9236AD6 (2 samples, 2.41%)</title><rect x="69.8795%" y="101" width="2.4096%" height="15" fill="rgb(231,13,6)" fg:x="58" fg:w="2"/><text x="70.1295%" y="111.50">`0..</text></g><g><title>`0x7FFED9290764 (2 samples, 2.41%)</title><rect x="69.8795%" y="85" width="2.4096%" height="15" fill="rgb(207,181,40)" fg:x="58" fg:w="2"/><text x="70.1295%" y="95.50">`0..</text></g><g><title>cssparser-rs.exe`cssparser_rs::Parser::create_selector(smallvec::SmallVec&lt;array$ (23 samples, 27.71%)</title><rect x="45.7831%" y="389" width="27.7108%" height="15" fill="rgb(254,173,49)" fg:x="38" fg:w="23"/><text x="46.0331%" y="399.50">cssparser-rs.exe`cssparser_rs::Parser::creat..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState&gt;::entry(smallvec::SmallVec&lt;array$ (19 samples, 22.89%)</title><rect x="50.6024%" y="373" width="22.8916%" height="15" fill="rgb(221,1,38)" fg:x="42" fg:w="19"/><text x="50.8524%" y="383.50">cssparser-rs.exe`std::collections::h..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::map_entry(enum2$&lt;hashbrown::rustc_entry::RustcEntry&lt;smallvec::SmallVec&lt;array$ (19 samples, 22.89%)</title><rect x="50.6024%" y="357" width="22.8916%" height="15" fill="rgb(206,124,46)" fg:x="42" fg:w="19"/><text x="50.8524%" y="367.50">cssparser-rs.exe`std::collections::h..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::rustc_entry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;(smallvec::SmallVec&lt;array$ (19 samples, 22.89%)</title><rect x="50.6024%" y="341" width="22.8916%" height="15" fill="rgb(249,21,11)" fg:x="42" fg:w="19"/><text x="50.8524%" y="351.50">cssparser-rs.exe`hashbrown::map::Has..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::reserve (19 samples, 22.89%)</title><rect x="50.6024%" y="325" width="22.8916%" height="15" fill="rgb(222,201,40)" fg:x="42" fg:w="19"/><text x="50.8524%" y="335.50">cssparser-rs.exe`hashbrown::map::Has..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;smallvec::SmallVec&lt;array$ (19 samples, 22.89%)</title><rect x="50.6024%" y="309" width="22.8916%" height="15" fill="rgb(235,61,29)" fg:x="42" fg:w="19"/><text x="50.8524%" y="319.50">cssparser-rs.exe`hashbrown::raw::Raw..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;smallvec::SmallVec&lt;array$ (19 samples, 22.89%)</title><rect x="50.6024%" y="293" width="22.8916%" height="15" fill="rgb(219,207,3)" fg:x="42" fg:w="19"/><text x="50.8524%" y="303.50">cssparser-rs.exe`hashbrown::raw::Raw..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (19 samples, 22.89%)</title><rect x="50.6024%" y="277" width="22.8916%" height="15" fill="rgb(222,56,46)" fg:x="42" fg:w="19"/><text x="50.8524%" y="287.50">cssparser-rs.exe`hashbrown::raw::Raw..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (19 samples, 22.89%)</title><rect x="50.6024%" y="261" width="22.8916%" height="15" fill="rgb(239,76,54)" fg:x="42" fg:w="19"/><text x="50.8524%" y="271.50">cssparser-rs.exe`hashbrown::raw::Raw..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 1.20%)</title><rect x="72.2892%" y="245" width="1.2048%" height="15" fill="rgb(231,124,27)" fg:x="60" fg:w="1"/><text x="72.5392%" y="255.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 1.20%)</title><rect x="72.2892%" y="229" width="1.2048%" height="15" fill="rgb(249,195,6)" fg:x="60" fg:w="1"/><text x="72.5392%" y="239.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::probe_seq (1 samples, 1.20%)</title><rect x="72.2892%" y="213" width="1.2048%" height="15" fill="rgb(237,174,47)" fg:x="60" fg:w="1"/><text x="72.5392%" y="223.50"></text></g><g><title>cssparser-rs.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt; &gt; &gt;(std::hash::random::RandomState*, smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="72.2892%" y="197" width="1.2048%" height="15" fill="rgb(206,201,31)" fg:x="60" fg:w="1"/><text x="72.5392%" y="207.50"></text></g><g><title>cssparser-rs.exe`std::hash::random::impl$1::build_hasher (1 samples, 1.20%)</title><rect x="72.2892%" y="181" width="1.2048%" height="15" fill="rgb(231,57,52)" fg:x="60" fg:w="1"/><text x="72.5392%" y="191.50"></text></g><g><title>cssparser-rs.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, smallvec::SmallVec&lt;array$ (2 samples, 2.41%)</title><rect x="73.4940%" y="325" width="2.4096%" height="15" fill="rgb(248,177,22)" fg:x="61" fg:w="2"/><text x="73.7440%" y="335.50">cs..</text></g><g><title>cssparser-rs.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt; &gt; &gt;(std::hash::random::RandomState*, smallvec::SmallVec&lt;array$ (2 samples, 2.41%)</title><rect x="73.4940%" y="309" width="2.4096%" height="15" fill="rgb(215,211,37)" fg:x="61" fg:w="2"/><text x="73.7440%" y="319.50">cs..</text></g><g><title>cssparser-rs.exe`std::hash::random::impl$4::finish (2 samples, 2.41%)</title><rect x="73.4940%" y="293" width="2.4096%" height="15" fill="rgb(241,128,51)" fg:x="61" fg:w="2"/><text x="73.7440%" y="303.50">cs..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$4::finish (2 samples, 2.41%)</title><rect x="73.4940%" y="277" width="2.4096%" height="15" fill="rgb(227,165,31)" fg:x="61" fg:w="2"/><text x="73.7440%" y="287.50">cs..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (2 samples, 2.41%)</title><rect x="73.4940%" y="261" width="2.4096%" height="15" fill="rgb(228,167,24)" fg:x="61" fg:w="2"/><text x="73.7440%" y="271.50">cs..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$8::d_rounds (2 samples, 2.41%)</title><rect x="73.4940%" y="245" width="2.4096%" height="15" fill="rgb(228,143,12)" fg:x="61" fg:w="2"/><text x="73.7440%" y="255.50">cs..</text></g><g><title>cssparser-rs.exe`core::num::impl$9::rotate_left (2 samples, 2.41%)</title><rect x="73.4940%" y="229" width="2.4096%" height="15" fill="rgb(249,149,8)" fg:x="61" fg:w="2"/><text x="73.7440%" y="239.50">cs..</text></g><g><title>cssparser-rs.exe`cssparser_rs::Properties::insert(ref$&lt;slice2$&lt;u8&gt; &gt;, enum2$&lt;core::option::Option&lt;ref$&lt;slice2$ (3 samples, 3.61%)</title><rect x="73.4940%" y="373" width="3.6145%" height="15" fill="rgb(243,35,44)" fg:x="61" fg:w="3"/><text x="73.7440%" y="383.50">cssp..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,std::hash::random::RandomState&gt;::entry(smallvec::SmallVec&lt;array$ (3 samples, 3.61%)</title><rect x="73.4940%" y="357" width="3.6145%" height="15" fill="rgb(246,89,9)" fg:x="61" fg:w="3"/><text x="73.7440%" y="367.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::rustc_entry&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;(smallvec::SmallVec&lt;array$ (3 samples, 3.61%)</title><rect x="73.4940%" y="341" width="3.6145%" height="15" fill="rgb(233,213,13)" fg:x="61" fg:w="3"/><text x="73.7440%" y="351.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::rustc_entry::impl$0::rustc_entry::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="75.9036%" y="325" width="1.2048%" height="15" fill="rgb(233,141,41)" fg:x="63" fg:w="1"/><text x="76.1536%" y="335.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (1 samples, 1.20%)</title><rect x="75.9036%" y="309" width="1.2048%" height="15" fill="rgb(239,167,4)" fg:x="63" fg:w="1"/><text x="76.1536%" y="319.50"></text></g><g><title>cssparser-rs.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt; &gt;,alloc::alloc::Global,hashbrown::rustc_entry::impl$0::rustc_entry::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="75.9036%" y="293" width="1.2048%" height="15" fill="rgb(209,217,16)" fg:x="63" fg:w="1"/><text x="76.1536%" y="303.50"></text></g><g><title>cssparser-rs.exe`hashbrown::rustc_entry::impl$0::rustc_entry::closure$0(hashbrown::rustc_entry::impl$0::rustc_entry::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,4&gt; &gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;*, tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$&lt;ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="75.9036%" y="277" width="1.2048%" height="15" fill="rgb(219,88,35)" fg:x="63" fg:w="1"/><text x="76.1536%" y="287.50"></text></g><g><title>cssparser-rs.exe`smallvec::impl$35::eq(smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;*, smallvec::SmallVec&lt;array$ (1 samples, 1.20%)</title><rect x="75.9036%" y="261" width="1.2048%" height="15" fill="rgb(220,193,23)" fg:x="63" fg:w="1"/><text x="76.1536%" y="271.50"></text></g><g><title>cssparser-rs.exe`core::slice::cmp::impl$0::eq(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="75.9036%" y="245" width="1.2048%" height="15" fill="rgb(230,90,52)" fg:x="63" fg:w="1"/><text x="76.1536%" y="255.50"></text></g><g><title>cssparser-rs.exe`core::slice::cmp::impl$5::equal(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (1 samples, 1.20%)</title><rect x="75.9036%" y="229" width="1.2048%" height="15" fill="rgb(252,106,19)" fg:x="63" fg:w="1"/><text x="76.1536%" y="239.50"></text></g><g><title>`0x7FFEC4B61389 (1 samples, 1.20%)</title><rect x="75.9036%" y="213" width="1.2048%" height="15" fill="rgb(206,74,20)" fg:x="63" fg:w="1"/><text x="76.1536%" y="223.50"></text></g><g><title>cssparser-rs.exe`cssparser_rs::Parser::update_property(ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$&lt;u8&gt; &gt;, ref$&lt;slice2$ (5 samples, 6.02%)</title><rect x="73.4940%" y="389" width="6.0241%" height="15" fill="rgb(230,138,44)" fg:x="61" fg:w="5"/><text x="73.7440%" y="399.50">cssparse..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState&gt;::get_mut(smallvec::SmallVec&lt;array$ (2 samples, 2.41%)</title><rect x="77.1084%" y="373" width="2.4096%" height="15" fill="rgb(235,182,43)" fg:x="64" fg:w="2"/><text x="77.3584%" y="383.50">cs..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_mut(smallvec::SmallVec&lt;array$ (2 samples, 2.41%)</title><rect x="77.1084%" y="357" width="2.4096%" height="15" fill="rgb(242,16,51)" fg:x="64" fg:w="2"/><text x="77.3584%" y="367.50">cs..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner_mut(smallvec::SmallVec&lt;array$ (2 samples, 2.41%)</title><rect x="77.1084%" y="341" width="2.4096%" height="15" fill="rgb(248,9,4)" fg:x="64" fg:w="2"/><text x="77.3584%" y="351.50">cs..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$ (2 samples, 2.41%)</title><rect x="77.1084%" y="325" width="2.4096%" height="15" fill="rgb(210,31,22)" fg:x="64" fg:w="2"/><text x="77.3584%" y="335.50">cs..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt;,smallvec::SmallVec&lt;array$ (2 samples, 2.41%)</title><rect x="77.1084%" y="309" width="2.4096%" height="15" fill="rgb(239,54,39)" fg:x="64" fg:w="2"/><text x="77.3584%" y="319.50">cs..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (2 samples, 2.41%)</title><rect x="77.1084%" y="293" width="2.4096%" height="15" fill="rgb(230,99,41)" fg:x="64" fg:w="2"/><text x="77.3584%" y="303.50">cs..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::probe_seq (2 samples, 2.41%)</title><rect x="77.1084%" y="277" width="2.4096%" height="15" fill="rgb(253,106,12)" fg:x="64" fg:w="2"/><text x="77.3584%" y="287.50">cs..</text></g><g><title>cssparser-rs.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;smallvec::SmallVec&lt;array$&lt;u8,1024&gt; &gt; &gt; &gt;(std::hash::random::RandomState*, smallvec::SmallVec&lt;array$ (2 samples, 2.41%)</title><rect x="77.1084%" y="261" width="2.4096%" height="15" fill="rgb(213,46,41)" fg:x="64" fg:w="2"/><text x="77.3584%" y="271.50">cs..</text></g><g><title>cssparser-rs.exe`std::hash::random::impl$4::finish (2 samples, 2.41%)</title><rect x="77.1084%" y="245" width="2.4096%" height="15" fill="rgb(215,133,35)" fg:x="64" fg:w="2"/><text x="77.3584%" y="255.50">cs..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$4::finish (2 samples, 2.41%)</title><rect x="77.1084%" y="229" width="2.4096%" height="15" fill="rgb(213,28,5)" fg:x="64" fg:w="2"/><text x="77.3584%" y="239.50">cs..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (2 samples, 2.41%)</title><rect x="77.1084%" y="213" width="2.4096%" height="15" fill="rgb(215,77,49)" fg:x="64" fg:w="2"/><text x="77.3584%" y="223.50">cs..</text></g><g><title>cssparser-rs.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (2 samples, 2.41%)</title><rect x="77.1084%" y="197" width="2.4096%" height="15" fill="rgb(248,100,22)" fg:x="64" fg:w="2"/><text x="77.3584%" y="207.50">cs..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (2 samples, 2.41%)</title><rect x="77.1084%" y="181" width="2.4096%" height="15" fill="rgb(208,67,9)" fg:x="64" fg:w="2"/><text x="77.3584%" y="191.50">cs..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$5::write(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (2 samples, 2.41%)</title><rect x="77.1084%" y="165" width="2.4096%" height="15" fill="rgb(219,133,21)" fg:x="64" fg:w="2"/><text x="77.3584%" y="175.50">cs..</text></g><g><title>cssparser-rs.exe`core::intrinsics::copy_nonoverlapping (1 samples, 1.20%)</title><rect x="78.3133%" y="149" width="1.2048%" height="15" fill="rgb(246,46,29)" fg:x="65" fg:w="1"/><text x="78.5633%" y="159.50"></text></g><g><title>cssparser-rs.exe`cssparser_rs::impl$0::lex::goto158_ctx36_x(logos::lexer::Lexer&lt;enum2$ (2 samples, 2.41%)</title><rect x="80.7229%" y="309" width="2.4096%" height="15" fill="rgb(246,185,52)" fg:x="67" fg:w="2"/><text x="80.9729%" y="319.50">cs..</text></g><g><title>`0x7FFED924AF38 (69 samples, 83.13%)</title><rect x="1.2048%" y="613" width="83.1325%" height="15" fill="rgb(252,136,11)" fg:x="1" fg:w="69"/><text x="1.4548%" y="623.50">`0x7FFED924AF38</text></g><g><title>`0x7FFED754259D (69 samples, 83.13%)</title><rect x="1.2048%" y="597" width="83.1325%" height="15" fill="rgb(219,138,53)" fg:x="1" fg:w="69"/><text x="1.4548%" y="607.50">`0x7FFED754259D</text></g><g><title>cssparser-rs.exe`__scrt_common_main_seh() (66 samples, 79.52%)</title><rect x="4.8193%" y="581" width="79.5181%" height="15" fill="rgb(211,51,23)" fg:x="4" fg:w="66"/><text x="5.0693%" y="591.50">cssparser-rs.exe`__scrt_common_main_seh()</text></g><g><title>cssparser-rs.exe`invoke_main() (61 samples, 73.49%)</title><rect x="10.8434%" y="565" width="73.4940%" height="15" fill="rgb(247,221,28)" fg:x="9" fg:w="61"/><text x="11.0934%" y="575.50">cssparser-rs.exe`invoke_main()</text></g><g><title>cssparser-rs.exe`main (61 samples, 73.49%)</title><rect x="10.8434%" y="549" width="73.4940%" height="15" fill="rgb(251,222,45)" fg:x="9" fg:w="61"/><text x="11.0934%" y="559.50">cssparser-rs.exe`main</text></g><g><title>cssparser-rs.exe`std::rt::lang_start_internal (61 samples, 73.49%)</title><rect x="10.8434%" y="533" width="73.4940%" height="15" fill="rgb(217,162,53)" fg:x="9" fg:w="61"/><text x="11.0934%" y="543.50">cssparser-rs.exe`std::rt::lang_start_internal</text></g><g><title>cssparser-rs.exe`std::panic::catch_unwind (61 samples, 73.49%)</title><rect x="10.8434%" y="517" width="73.4940%" height="15" fill="rgb(229,93,14)" fg:x="9" fg:w="61"/><text x="11.0934%" y="527.50">cssparser-rs.exe`std::panic::catch_unwind</text></g><g><title>cssparser-rs.exe`std::panicking::try (61 samples, 73.49%)</title><rect x="10.8434%" y="501" width="73.4940%" height="15" fill="rgb(209,67,49)" fg:x="9" fg:w="61"/><text x="11.0934%" y="511.50">cssparser-rs.exe`std::panicking::try</text></g><g><title>cssparser-rs.exe`std::panicking::try::do_call (61 samples, 73.49%)</title><rect x="10.8434%" y="485" width="73.4940%" height="15" fill="rgb(213,87,29)" fg:x="9" fg:w="61"/><text x="11.0934%" y="495.50">cssparser-rs.exe`std::panicking::try::do_call</text></g><g><title>cssparser-rs.exe`std::rt::lang_start_internal::closure$1 (61 samples, 73.49%)</title><rect x="10.8434%" y="469" width="73.4940%" height="15" fill="rgb(205,151,52)" fg:x="9" fg:w="61"/><text x="11.0934%" y="479.50">cssparser-rs.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>cssparser-rs.exe`std::panic::catch_unwind (61 samples, 73.49%)</title><rect x="10.8434%" y="453" width="73.4940%" height="15" fill="rgb(253,215,39)" fg:x="9" fg:w="61"/><text x="11.0934%" y="463.50">cssparser-rs.exe`std::panic::catch_unwind</text></g><g><title>cssparser-rs.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (61 samples, 73.49%)</title><rect x="10.8434%" y="437" width="73.4940%" height="15" fill="rgb(221,220,41)" fg:x="9" fg:w="61"/><text x="11.0934%" y="447.50">cssparser-rs.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>cssparser-rs.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (61 samples, 73.49%)</title><rect x="10.8434%" y="421" width="73.4940%" height="15" fill="rgb(218,133,21)" fg:x="9" fg:w="61"/><text x="11.0934%" y="431.50">cssparser-rs.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>cssparser-rs.exe`cssparser_rs::main (61 samples, 73.49%)</title><rect x="10.8434%" y="405" width="73.4940%" height="15" fill="rgb(221,193,43)" fg:x="9" fg:w="61"/><text x="11.0934%" y="415.50">cssparser-rs.exe`cssparser_rs::main</text></g><g><title>cssparser-rs.exe`logos::lexer::impl$3::next(logos::lexer::Lexer&lt;enum2$ (4 samples, 4.82%)</title><rect x="79.5181%" y="389" width="4.8193%" height="15" fill="rgb(240,128,52)" fg:x="66" fg:w="4"/><text x="79.7681%" y="399.50">csspar..</text></g><g><title>cssparser-rs.exe`core::mem::manually_drop::ManuallyDrop&lt;enum2$&lt;core::option::Option&lt;enum2$&lt;core::result::Result&lt;enum2$&lt;cssparser_rs::Token&gt;,tuple$&lt;&gt; &gt; &gt; &gt; &gt; &gt;::take (4 samples, 4.82%)</title><rect x="79.5181%" y="373" width="4.8193%" height="15" fill="rgb(253,114,12)" fg:x="66" fg:w="4"/><text x="79.7681%" y="383.50">csspar..</text></g><g><title>cssparser-rs.exe`core::ptr::read(enum2$&lt;core::option::Option&lt;enum2$&lt;core::result::Result&lt;enum2$&lt;cssparser_rs::Token&gt;,tuple$ (4 samples, 4.82%)</title><rect x="79.5181%" y="357" width="4.8193%" height="15" fill="rgb(215,223,47)" fg:x="66" fg:w="4"/><text x="79.7681%" y="367.50">csspar..</text></g><g><title>cssparser-rs.exe`cssparser_rs::impl$0::lex(logos::lexer::Lexer&lt;enum2$ (4 samples, 4.82%)</title><rect x="79.5181%" y="341" width="4.8193%" height="15" fill="rgb(248,225,23)" fg:x="66" fg:w="4"/><text x="79.7681%" y="351.50">csspar..</text></g><g><title>cssparser-rs.exe`cssparser_rs::impl$0::lex::goto163(logos::lexer::Lexer&lt;enum2$ (3 samples, 3.61%)</title><rect x="80.7229%" y="325" width="3.6145%" height="15" fill="rgb(250,108,0)" fg:x="67" fg:w="3"/><text x="80.9729%" y="335.50">cssp..</text></g><g><title>cssparser-rs.exe`cssparser_rs::impl$0::lex::goto19_at1(logos::lexer::Lexer&lt;enum2$ (1 samples, 1.20%)</title><rect x="83.1325%" y="309" width="1.2048%" height="15" fill="rgb(228,208,7)" fg:x="69" fg:w="1"/><text x="83.3825%" y="319.50"></text></g><g><title>cssparser-rs.exe`cssparser_rs::impl$0::lex::goto18_ctx17_x(logos::lexer::Lexer&lt;enum2$ (1 samples, 1.20%)</title><rect x="83.1325%" y="293" width="1.2048%" height="15" fill="rgb(244,45,10)" fg:x="69" fg:w="1"/><text x="83.3825%" y="303.50"></text></g><g><title>`0x7FFED92CD41B (1 samples, 1.20%)</title><rect x="84.3373%" y="565" width="1.2048%" height="15" fill="rgb(207,125,25)" fg:x="70" fg:w="1"/><text x="84.5873%" y="575.50"></text></g><g><title>`0x7FFED92CC8F7 (1 samples, 1.20%)</title><rect x="84.3373%" y="549" width="1.2048%" height="15" fill="rgb(210,195,18)" fg:x="70" fg:w="1"/><text x="84.5873%" y="559.50"></text></g><g><title>`0x7FFED92CC761 (1 samples, 1.20%)</title><rect x="84.3373%" y="533" width="1.2048%" height="15" fill="rgb(249,80,12)" fg:x="70" fg:w="1"/><text x="84.5873%" y="543.50"></text></g><g><title>`0x7FFED92905E4 (1 samples, 1.20%)</title><rect x="84.3373%" y="517" width="1.2048%" height="15" fill="rgb(221,65,9)" fg:x="70" fg:w="1"/><text x="84.5873%" y="527.50"></text></g><g><title>`0x7FFED92CDB2B (1 samples, 1.20%)</title><rect x="85.5422%" y="565" width="1.2048%" height="15" fill="rgb(235,49,36)" fg:x="71" fg:w="1"/><text x="85.7922%" y="575.50"></text></g><g><title>`0x7FFED92219D0 (1 samples, 1.20%)</title><rect x="85.5422%" y="549" width="1.2048%" height="15" fill="rgb(225,32,20)" fg:x="71" fg:w="1"/><text x="85.7922%" y="559.50"></text></g><g><title>`0x7FFED92226BA (1 samples, 1.20%)</title><rect x="85.5422%" y="533" width="1.2048%" height="15" fill="rgb(215,141,46)" fg:x="71" fg:w="1"/><text x="85.7922%" y="543.50"></text></g><g><title>`0x7FFED9222547 (1 samples, 1.20%)</title><rect x="85.5422%" y="517" width="1.2048%" height="15" fill="rgb(250,160,47)" fg:x="71" fg:w="1"/><text x="85.7922%" y="527.50"></text></g><g><title>`0x7FFED9293DF4 (1 samples, 1.20%)</title><rect x="85.5422%" y="501" width="1.2048%" height="15" fill="rgb(216,222,40)" fg:x="71" fg:w="1"/><text x="85.7922%" y="511.50"></text></g><g><title>`0x7FFED92CE4FE (1 samples, 1.20%)</title><rect x="86.7470%" y="565" width="1.2048%" height="15" fill="rgb(234,217,39)" fg:x="72" fg:w="1"/><text x="86.9970%" y="575.50"></text></g><g><title>`0x7FFED926BE98 (1 samples, 1.20%)</title><rect x="86.7470%" y="549" width="1.2048%" height="15" fill="rgb(207,178,40)" fg:x="72" fg:w="1"/><text x="86.9970%" y="559.50"></text></g><g><title>`0x7FFED926BF6C (1 samples, 1.20%)</title><rect x="86.7470%" y="533" width="1.2048%" height="15" fill="rgb(221,136,13)" fg:x="72" fg:w="1"/><text x="86.9970%" y="543.50"></text></g><g><title>`0x7FFED9290A04 (1 samples, 1.20%)</title><rect x="86.7470%" y="517" width="1.2048%" height="15" fill="rgb(249,199,10)" fg:x="72" fg:w="1"/><text x="86.9970%" y="527.50"></text></g><g><title>`0x7FFED9218DA6 (1 samples, 1.20%)</title><rect x="87.9518%" y="517" width="1.2048%" height="15" fill="rgb(249,222,13)" fg:x="73" fg:w="1"/><text x="88.2018%" y="527.50"></text></g><g><title>`0x7FFED921E299 (1 samples, 1.20%)</title><rect x="87.9518%" y="501" width="1.2048%" height="15" fill="rgb(244,185,38)" fg:x="73" fg:w="1"/><text x="88.2018%" y="511.50"></text></g><g><title>`0x7FFED921D319 (1 samples, 1.20%)</title><rect x="87.9518%" y="485" width="1.2048%" height="15" fill="rgb(236,202,9)" fg:x="73" fg:w="1"/><text x="88.2018%" y="495.50"></text></g><g><title>`0x7FFED921C8E8 (1 samples, 1.20%)</title><rect x="87.9518%" y="469" width="1.2048%" height="15" fill="rgb(250,229,37)" fg:x="73" fg:w="1"/><text x="88.2018%" y="479.50"></text></g><g><title>`0x7FFED9214BAB (1 samples, 1.20%)</title><rect x="87.9518%" y="453" width="1.2048%" height="15" fill="rgb(206,174,23)" fg:x="73" fg:w="1"/><text x="88.2018%" y="463.50"></text></g><g><title>`0x7FFED9214DF6 (1 samples, 1.20%)</title><rect x="87.9518%" y="437" width="1.2048%" height="15" fill="rgb(211,33,43)" fg:x="73" fg:w="1"/><text x="88.2018%" y="447.50"></text></g><g><title>`0x7FFED9215DB4 (1 samples, 1.20%)</title><rect x="87.9518%" y="421" width="1.2048%" height="15" fill="rgb(245,58,50)" fg:x="73" fg:w="1"/><text x="88.2018%" y="431.50"></text></g><g><title>`0x7FFED921D319 (1 samples, 1.20%)</title><rect x="87.9518%" y="405" width="1.2048%" height="15" fill="rgb(244,68,36)" fg:x="73" fg:w="1"/><text x="88.2018%" y="415.50"></text></g><g><title>`0x7FFED921C8E8 (1 samples, 1.20%)</title><rect x="87.9518%" y="389" width="1.2048%" height="15" fill="rgb(232,229,15)" fg:x="73" fg:w="1"/><text x="88.2018%" y="399.50"></text></g><g><title>`0x7FFED9214A31 (1 samples, 1.20%)</title><rect x="87.9518%" y="373" width="1.2048%" height="15" fill="rgb(254,30,23)" fg:x="73" fg:w="1"/><text x="88.2018%" y="383.50"></text></g><g><title>`0x7FFED921B29C (1 samples, 1.20%)</title><rect x="87.9518%" y="357" width="1.2048%" height="15" fill="rgb(235,160,14)" fg:x="73" fg:w="1"/><text x="88.2018%" y="367.50"></text></g><g><title>`0x7FFED9218DD0 (1 samples, 1.20%)</title><rect x="89.1566%" y="517" width="1.2048%" height="15" fill="rgb(212,155,44)" fg:x="74" fg:w="1"/><text x="89.4066%" y="527.50"></text></g><g><title>`0x7FFED921A590 (1 samples, 1.20%)</title><rect x="89.1566%" y="501" width="1.2048%" height="15" fill="rgb(226,2,50)" fg:x="74" fg:w="1"/><text x="89.4066%" y="511.50"></text></g><g><title>`0x7FFED92012AB (1 samples, 1.20%)</title><rect x="89.1566%" y="485" width="1.2048%" height="15" fill="rgb(234,177,6)" fg:x="74" fg:w="1"/><text x="89.4066%" y="495.50"></text></g><g><title>`0x7FFED92144C5 (1 samples, 1.20%)</title><rect x="89.1566%" y="469" width="1.2048%" height="15" fill="rgb(217,24,9)" fg:x="74" fg:w="1"/><text x="89.4066%" y="479.50"></text></g><g><title>`0x7FFED688224B (1 samples, 1.20%)</title><rect x="90.3614%" y="405" width="1.2048%" height="15" fill="rgb(220,13,46)" fg:x="75" fg:w="1"/><text x="90.6114%" y="415.50"></text></g><g><title>`0x7FFED688276E (1 samples, 1.20%)</title><rect x="90.3614%" y="389" width="1.2048%" height="15" fill="rgb(239,221,27)" fg:x="75" fg:w="1"/><text x="90.6114%" y="399.50"></text></g><g><title>`0x7FFED688201D (2 samples, 2.41%)</title><rect x="90.3614%" y="421" width="2.4096%" height="15" fill="rgb(222,198,25)" fg:x="75" fg:w="2"/><text x="90.6114%" y="431.50">`0..</text></g><g><title>`0x7FFED6882607 (1 samples, 1.20%)</title><rect x="91.5663%" y="405" width="1.2048%" height="15" fill="rgb(211,99,13)" fg:x="76" fg:w="1"/><text x="91.8163%" y="415.50"></text></g><g><title>`0x7FFED68AB47F (1 samples, 1.20%)</title><rect x="91.5663%" y="389" width="1.2048%" height="15" fill="rgb(232,111,31)" fg:x="76" fg:w="1"/><text x="91.8163%" y="399.50"></text></g><g><title>`0x7FFED68AB82A (1 samples, 1.20%)</title><rect x="91.5663%" y="373" width="1.2048%" height="15" fill="rgb(245,82,37)" fg:x="76" fg:w="1"/><text x="91.8163%" y="383.50"></text></g><g><title>`0x7FFED9290E44 (1 samples, 1.20%)</title><rect x="91.5663%" y="357" width="1.2048%" height="15" fill="rgb(227,149,46)" fg:x="76" fg:w="1"/><text x="91.8163%" y="367.50"></text></g><g><title>`0x7FFED92CE973 (5 samples, 6.02%)</title><rect x="87.9518%" y="565" width="6.0241%" height="15" fill="rgb(218,36,50)" fg:x="73" fg:w="5"/><text x="88.2018%" y="575.50">`0x7FFED..</text></g><g><title>`0x7FFED921A74A (5 samples, 6.02%)</title><rect x="87.9518%" y="549" width="6.0241%" height="15" fill="rgb(226,80,48)" fg:x="73" fg:w="5"/><text x="88.2018%" y="559.50">`0x7FFED..</text></g><g><title>`0x7FFED92090CC (5 samples, 6.02%)</title><rect x="87.9518%" y="533" width="6.0241%" height="15" fill="rgb(238,224,15)" fg:x="73" fg:w="5"/><text x="88.2018%" y="543.50">`0x7FFED..</text></g><g><title>`0x7FFED9218E30 (3 samples, 3.61%)</title><rect x="90.3614%" y="517" width="3.6145%" height="15" fill="rgb(241,136,10)" fg:x="75" fg:w="3"/><text x="90.6114%" y="527.50">`0x7..</text></g><g><title>`0x7FFED921DB1D (3 samples, 3.61%)</title><rect x="90.3614%" y="501" width="3.6145%" height="15" fill="rgb(208,32,45)" fg:x="75" fg:w="3"/><text x="90.6114%" y="511.50">`0x7..</text></g><g><title>`0x7FFED925D460 (3 samples, 3.61%)</title><rect x="90.3614%" y="485" width="3.6145%" height="15" fill="rgb(207,135,9)" fg:x="75" fg:w="3"/><text x="90.6114%" y="495.50">`0x7..</text></g><g><title>`0x7FFED925D3EE (3 samples, 3.61%)</title><rect x="90.3614%" y="469" width="3.6145%" height="15" fill="rgb(206,86,44)" fg:x="75" fg:w="3"/><text x="90.6114%" y="479.50">`0x7..</text></g><g><title>`0x7FFED925D63D (3 samples, 3.61%)</title><rect x="90.3614%" y="453" width="3.6145%" height="15" fill="rgb(245,177,15)" fg:x="75" fg:w="3"/><text x="90.6114%" y="463.50">`0x7..</text></g><g><title>`0x7FFED9218B8F (3 samples, 3.61%)</title><rect x="90.3614%" y="437" width="3.6145%" height="15" fill="rgb(206,64,50)" fg:x="75" fg:w="3"/><text x="90.6114%" y="447.50">`0x7..</text></g><g><title>`0x7FFED6882097 (1 samples, 1.20%)</title><rect x="92.7711%" y="421" width="1.2048%" height="15" fill="rgb(234,36,40)" fg:x="77" fg:w="1"/><text x="93.0211%" y="431.50"></text></g><g><title>`0x7FFED68828B4 (1 samples, 1.20%)</title><rect x="92.7711%" y="405" width="1.2048%" height="15" fill="rgb(213,64,8)" fg:x="77" fg:w="1"/><text x="93.0211%" y="415.50"></text></g><g><title>`0x7FFED6882976 (1 samples, 1.20%)</title><rect x="92.7711%" y="389" width="1.2048%" height="15" fill="rgb(210,75,36)" fg:x="77" fg:w="1"/><text x="93.0211%" y="399.50"></text></g><g><title>`0x7FFED68FE375 (1 samples, 1.20%)</title><rect x="92.7711%" y="373" width="1.2048%" height="15" fill="rgb(229,88,21)" fg:x="77" fg:w="1"/><text x="93.0211%" y="383.50"></text></g><g><title>`0x7FFED690917B (1 samples, 1.20%)</title><rect x="92.7711%" y="357" width="1.2048%" height="15" fill="rgb(252,204,47)" fg:x="77" fg:w="1"/><text x="93.0211%" y="367.50"></text></g><g><title>`0x7FFED6910BC3 (1 samples, 1.20%)</title><rect x="92.7711%" y="341" width="1.2048%" height="15" fill="rgb(208,77,27)" fg:x="77" fg:w="1"/><text x="93.0211%" y="351.50"></text></g><g><title>`0x7FFED690AE18 (1 samples, 1.20%)</title><rect x="92.7711%" y="325" width="1.2048%" height="15" fill="rgb(221,76,26)" fg:x="77" fg:w="1"/><text x="93.0211%" y="335.50"></text></g><g><title>`0x7FFED690B346 (1 samples, 1.20%)</title><rect x="92.7711%" y="309" width="1.2048%" height="15" fill="rgb(225,139,18)" fg:x="77" fg:w="1"/><text x="93.0211%" y="319.50"></text></g><g><title>`0x7FFED68F9438 (1 samples, 1.20%)</title><rect x="92.7711%" y="293" width="1.2048%" height="15" fill="rgb(230,137,11)" fg:x="77" fg:w="1"/><text x="93.0211%" y="303.50"></text></g><g><title>`0x7FFED68F5E40 (1 samples, 1.20%)</title><rect x="92.7711%" y="277" width="1.2048%" height="15" fill="rgb(212,28,1)" fg:x="77" fg:w="1"/><text x="93.0211%" y="287.50"></text></g><g><title>`0x7FFED68F7C44 (1 samples, 1.20%)</title><rect x="92.7711%" y="261" width="1.2048%" height="15" fill="rgb(248,164,17)" fg:x="77" fg:w="1"/><text x="93.0211%" y="271.50"></text></g><g><title>`0x7FFED92CEA1D (1 samples, 1.20%)</title><rect x="93.9759%" y="565" width="1.2048%" height="15" fill="rgb(222,171,42)" fg:x="78" fg:w="1"/><text x="94.2259%" y="575.50"></text></g><g><title>`0x7FFED92089C2 (1 samples, 1.20%)</title><rect x="93.9759%" y="549" width="1.2048%" height="15" fill="rgb(243,84,45)" fg:x="78" fg:w="1"/><text x="94.2259%" y="559.50"></text></g><g><title>`0x7FFED9204A6A (1 samples, 1.20%)</title><rect x="93.9759%" y="533" width="1.2048%" height="15" fill="rgb(252,49,23)" fg:x="78" fg:w="1"/><text x="94.2259%" y="543.50"></text></g><g><title>`0x7FFED92CECA3 (1 samples, 1.20%)</title><rect x="95.1807%" y="565" width="1.2048%" height="15" fill="rgb(215,19,7)" fg:x="79" fg:w="1"/><text x="95.4307%" y="575.50"></text></g><g><title>`0x7FFED9214BAB (1 samples, 1.20%)</title><rect x="95.1807%" y="549" width="1.2048%" height="15" fill="rgb(238,81,41)" fg:x="79" fg:w="1"/><text x="95.4307%" y="559.50"></text></g><g><title>`0x7FFED9214DF6 (1 samples, 1.20%)</title><rect x="95.1807%" y="533" width="1.2048%" height="15" fill="rgb(210,199,37)" fg:x="79" fg:w="1"/><text x="95.4307%" y="543.50"></text></g><g><title>`0x7FFED9215DB4 (1 samples, 1.20%)</title><rect x="95.1807%" y="517" width="1.2048%" height="15" fill="rgb(244,192,49)" fg:x="79" fg:w="1"/><text x="95.4307%" y="527.50"></text></g><g><title>`0x7FFED921D319 (1 samples, 1.20%)</title><rect x="95.1807%" y="501" width="1.2048%" height="15" fill="rgb(226,211,11)" fg:x="79" fg:w="1"/><text x="95.4307%" y="511.50"></text></g><g><title>`0x7FFED921C744 (1 samples, 1.20%)</title><rect x="95.1807%" y="485" width="1.2048%" height="15" fill="rgb(236,162,54)" fg:x="79" fg:w="1"/><text x="95.4307%" y="495.50"></text></g><g><title>`0x7FFED921C5BA (1 samples, 1.20%)</title><rect x="95.1807%" y="469" width="1.2048%" height="15" fill="rgb(220,229,9)" fg:x="79" fg:w="1"/><text x="95.4307%" y="479.50"></text></g><g><title>`0x7FFED921C9BC (1 samples, 1.20%)</title><rect x="95.1807%" y="453" width="1.2048%" height="15" fill="rgb(250,87,22)" fg:x="79" fg:w="1"/><text x="95.4307%" y="463.50"></text></g><g><title>`0x7FFED92908A4 (1 samples, 1.20%)</title><rect x="95.1807%" y="437" width="1.2048%" height="15" fill="rgb(239,43,17)" fg:x="79" fg:w="1"/><text x="95.4307%" y="447.50"></text></g><g><title>`0x7FFED9200F1E (1 samples, 1.20%)</title><rect x="96.3855%" y="517" width="1.2048%" height="15" fill="rgb(231,177,25)" fg:x="80" fg:w="1"/><text x="96.6355%" y="527.50"></text></g><g><title>`0x7FFED921DF5C (1 samples, 1.20%)</title><rect x="96.3855%" y="501" width="1.2048%" height="15" fill="rgb(219,179,1)" fg:x="80" fg:w="1"/><text x="96.6355%" y="511.50"></text></g><g><title>`0x7FFED92CECAB (2 samples, 2.41%)</title><rect x="96.3855%" y="565" width="2.4096%" height="15" fill="rgb(238,219,53)" fg:x="80" fg:w="2"/><text x="96.6355%" y="575.50">`0..</text></g><g><title>`0x7FFED921A590 (2 samples, 2.41%)</title><rect x="96.3855%" y="549" width="2.4096%" height="15" fill="rgb(232,167,36)" fg:x="80" fg:w="2"/><text x="96.6355%" y="559.50">`0..</text></g><g><title>`0x7FFED92013B0 (2 samples, 2.41%)</title><rect x="96.3855%" y="533" width="2.4096%" height="15" fill="rgb(244,19,51)" fg:x="80" fg:w="2"/><text x="96.6355%" y="543.50">`0..</text></g><g><title>`0x7FFED9200FE8 (1 samples, 1.20%)</title><rect x="97.5904%" y="517" width="1.2048%" height="15" fill="rgb(224,6,22)" fg:x="81" fg:w="1"/><text x="97.8404%" y="527.50"></text></g><g><title>`0x7FFED9200B4D (1 samples, 1.20%)</title><rect x="97.5904%" y="501" width="1.2048%" height="15" fill="rgb(224,145,5)" fg:x="81" fg:w="1"/><text x="97.8404%" y="511.50"></text></g><g><title>`0x7FFED9290584 (1 samples, 1.20%)</title><rect x="97.5904%" y="485" width="1.2048%" height="15" fill="rgb(234,130,49)" fg:x="81" fg:w="1"/><text x="97.8404%" y="495.50"></text></g><g><title>all (83 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="83"/><text x="0.2500%" y="639.50"></text></g><g><title>`0x7FFED926440E (13 samples, 15.66%)</title><rect x="84.3373%" y="613" width="15.6627%" height="15" fill="rgb(208,96,46)" fg:x="70" fg:w="13"/><text x="84.5873%" y="623.50">`0x7FFED926440E</text></g><g><title>`0x7FFED92644E3 (13 samples, 15.66%)</title><rect x="84.3373%" y="597" width="15.6627%" height="15" fill="rgb(239,3,39)" fg:x="70" fg:w="13"/><text x="84.5873%" y="607.50">`0x7FFED92644E3</text></g><g><title>`0x7FFED92BAAD6 (13 samples, 15.66%)</title><rect x="84.3373%" y="581" width="15.6627%" height="15" fill="rgb(233,210,1)" fg:x="70" fg:w="13"/><text x="84.5873%" y="591.50">`0x7FFED92BAAD6</text></g><g><title>`0x7FFED92CEE29 (1 samples, 1.20%)</title><rect x="98.7952%" y="565" width="1.2048%" height="15" fill="rgb(244,137,37)" fg:x="82" fg:w="1"/><text x="99.0452%" y="575.50"></text></g><g><title>`0x7FFED925D460 (1 samples, 1.20%)</title><rect x="98.7952%" y="549" width="1.2048%" height="15" fill="rgb(240,136,2)" fg:x="82" fg:w="1"/><text x="99.0452%" y="559.50"></text></g><g><title>`0x7FFED925D460 (1 samples, 1.20%)</title><rect x="98.7952%" y="533" width="1.2048%" height="15" fill="rgb(239,18,37)" fg:x="82" fg:w="1"/><text x="99.0452%" y="543.50"></text></g><g><title>`0x7FFED925D3EE (1 samples, 1.20%)</title><rect x="98.7952%" y="517" width="1.2048%" height="15" fill="rgb(218,185,22)" fg:x="82" fg:w="1"/><text x="99.0452%" y="527.50"></text></g><g><title>`0x7FFED925D63D (1 samples, 1.20%)</title><rect x="98.7952%" y="501" width="1.2048%" height="15" fill="rgb(225,218,4)" fg:x="82" fg:w="1"/><text x="99.0452%" y="511.50"></text></g><g><title>`0x7FFED9218B8F (1 samples, 1.20%)</title><rect x="98.7952%" y="485" width="1.2048%" height="15" fill="rgb(230,182,32)" fg:x="82" fg:w="1"/><text x="99.0452%" y="495.50"></text></g><g><title>`0x7FFED6C176B3 (1 samples, 1.20%)</title><rect x="98.7952%" y="469" width="1.2048%" height="15" fill="rgb(242,56,43)" fg:x="82" fg:w="1"/><text x="99.0452%" y="479.50"></text></g><g><title>`0x7FFED6C17FCA (1 samples, 1.20%)</title><rect x="98.7952%" y="453" width="1.2048%" height="15" fill="rgb(233,99,24)" fg:x="82" fg:w="1"/><text x="99.0452%" y="463.50"></text></g><g><title>`0x7FFED6C57C6C (1 samples, 1.20%)</title><rect x="98.7952%" y="437" width="1.2048%" height="15" fill="rgb(234,209,42)" fg:x="82" fg:w="1"/><text x="99.0452%" y="447.50"></text></g></svg></svg>