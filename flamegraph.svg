<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="53"><g><title>`0x7FFED924AF10 (2 samples, 3.77%)</title><rect x="0.0000%" y="757" width="3.7736%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="767.50">`0x7..</text></g><g><title>`0x7FFED9225CF2 (1 samples, 1.89%)</title><rect x="3.7736%" y="725" width="1.8868%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="4.0236%" y="735.50">`..</text></g><g><title>`0x7FFED92276D5 (1 samples, 1.89%)</title><rect x="3.7736%" y="709" width="1.8868%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="4.0236%" y="719.50">`..</text></g><g><title>`0x7FFED92012AB (1 samples, 1.89%)</title><rect x="5.6604%" y="677" width="1.8868%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="5.9104%" y="687.50">`..</text></g><g><title>`0x7FFED921415C (1 samples, 1.89%)</title><rect x="5.6604%" y="661" width="1.8868%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="5.9104%" y="671.50">`..</text></g><g><title>`0x7FFED9225E76 (2 samples, 3.77%)</title><rect x="5.6604%" y="725" width="3.7736%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="2"/><text x="5.9104%" y="735.50">`0x7..</text></g><g><title>`0x7FFED92528AA (2 samples, 3.77%)</title><rect x="5.6604%" y="709" width="3.7736%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="2"/><text x="5.9104%" y="719.50">`0x7..</text></g><g><title>`0x7FFED92011EB (2 samples, 3.77%)</title><rect x="5.6604%" y="693" width="3.7736%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="2"/><text x="5.9104%" y="703.50">`0x7..</text></g><g><title>`0x7FFED92013B0 (1 samples, 1.89%)</title><rect x="7.5472%" y="677" width="1.8868%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="7.7972%" y="687.50">`..</text></g><g><title>`0x7FFED9200F1E (1 samples, 1.89%)</title><rect x="7.5472%" y="661" width="1.8868%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="7.7972%" y="671.50">`..</text></g><g><title>`0x7FFED921E041 (1 samples, 1.89%)</title><rect x="7.5472%" y="645" width="1.8868%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="7.7972%" y="655.50">`..</text></g><g><title>`0x7FFED921A8F7 (1 samples, 1.89%)</title><rect x="7.5472%" y="629" width="1.8868%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="7.7972%" y="639.50">`..</text></g><g><title>`0x7FFED921B139 (1 samples, 1.89%)</title><rect x="7.5472%" y="613" width="1.8868%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="1"/><text x="7.7972%" y="623.50">`..</text></g><g><title>`0x7FFED9290B44 (1 samples, 1.89%)</title><rect x="7.5472%" y="597" width="1.8868%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="7.7972%" y="607.50">`..</text></g><g><title>`0x7FFED92014A2 (1 samples, 1.89%)</title><rect x="9.4340%" y="565" width="1.8868%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="9.6840%" y="575.50">`..</text></g><g><title>`0x7FFED921A8F7 (1 samples, 1.89%)</title><rect x="9.4340%" y="549" width="1.8868%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="9.6840%" y="559.50">`..</text></g><g><title>`0x7FFED921B139 (1 samples, 1.89%)</title><rect x="9.4340%" y="533" width="1.8868%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="9.6840%" y="543.50">`..</text></g><g><title>`0x7FFED9290B44 (1 samples, 1.89%)</title><rect x="9.4340%" y="517" width="1.8868%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="9.6840%" y="527.50">`..</text></g><g><title>`0x7FFED9214BAB (1 samples, 1.89%)</title><rect x="11.3208%" y="517" width="1.8868%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="11.5708%" y="527.50">`..</text></g><g><title>`0x7FFED9214DC0 (1 samples, 1.89%)</title><rect x="11.3208%" y="501" width="1.8868%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="11.5708%" y="511.50">`..</text></g><g><title>`0x7FFED9214E9F (1 samples, 1.89%)</title><rect x="11.3208%" y="485" width="1.8868%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="11.5708%" y="495.50">`..</text></g><g><title>`0x7FFED9218DC4 (3 samples, 5.66%)</title><rect x="9.4340%" y="597" width="5.6604%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="3"/><text x="9.6840%" y="607.50">`0x7FFE..</text></g><g><title>`0x7FFED92012DF (3 samples, 5.66%)</title><rect x="9.4340%" y="581" width="5.6604%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="3"/><text x="9.6840%" y="591.50">`0x7FFE..</text></g><g><title>`0x7FFED9201510 (2 samples, 3.77%)</title><rect x="11.3208%" y="565" width="3.7736%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="2"/><text x="11.5708%" y="575.50">`0x7..</text></g><g><title>`0x7FFED9200B2F (2 samples, 3.77%)</title><rect x="11.3208%" y="549" width="3.7736%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="2"/><text x="11.5708%" y="559.50">`0x7..</text></g><g><title>`0x7FFED921C8E8 (2 samples, 3.77%)</title><rect x="11.3208%" y="533" width="3.7736%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="2"/><text x="11.5708%" y="543.50">`0x7..</text></g><g><title>`0x7FFED9214C64 (1 samples, 1.89%)</title><rect x="13.2075%" y="517" width="1.8868%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="13.4575%" y="527.50">`..</text></g><g><title>`0x7FFED9214153 (1 samples, 1.89%)</title><rect x="13.2075%" y="501" width="1.8868%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="13.4575%" y="511.50">`..</text></g><g><title>`0x7FFED6C1BEA8 (4 samples, 7.55%)</title><rect x="9.4340%" y="693" width="7.5472%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="4"/><text x="9.6840%" y="703.50">`0x7FFED6C..</text></g><g><title>`0x7FFED6C28FB1 (4 samples, 7.55%)</title><rect x="9.4340%" y="677" width="7.5472%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="4"/><text x="9.6840%" y="687.50">`0x7FFED6C..</text></g><g><title>`0x7FFED6C21C03 (4 samples, 7.55%)</title><rect x="9.4340%" y="661" width="7.5472%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="4"/><text x="9.6840%" y="671.50">`0x7FFED6C..</text></g><g><title>`0x7FFED686B732 (4 samples, 7.55%)</title><rect x="9.4340%" y="645" width="7.5472%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="4"/><text x="9.6840%" y="655.50">`0x7FFED68..</text></g><g><title>`0x7FFED921A74A (4 samples, 7.55%)</title><rect x="9.4340%" y="629" width="7.5472%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="4"/><text x="9.6840%" y="639.50">`0x7FFED92..</text></g><g><title>`0x7FFED92090CC (4 samples, 7.55%)</title><rect x="9.4340%" y="613" width="7.5472%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="4"/><text x="9.6840%" y="623.50">`0x7FFED92..</text></g><g><title>`0x7FFED9218E30 (1 samples, 1.89%)</title><rect x="15.0943%" y="597" width="1.8868%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="1"/><text x="15.3443%" y="607.50">`..</text></g><g><title>`0x7FFED921DB1D (1 samples, 1.89%)</title><rect x="15.0943%" y="581" width="1.8868%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="15.3443%" y="591.50">`..</text></g><g><title>`0x7FFED925D460 (1 samples, 1.89%)</title><rect x="15.0943%" y="565" width="1.8868%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="15.3443%" y="575.50">`..</text></g><g><title>`0x7FFED925D3EE (1 samples, 1.89%)</title><rect x="15.0943%" y="549" width="1.8868%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="1"/><text x="15.3443%" y="559.50">`..</text></g><g><title>`0x7FFED925D63D (1 samples, 1.89%)</title><rect x="15.0943%" y="533" width="1.8868%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="1"/><text x="15.3443%" y="543.50">`..</text></g><g><title>`0x7FFED9218B8F (1 samples, 1.89%)</title><rect x="15.0943%" y="517" width="1.8868%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="15.3443%" y="527.50">`..</text></g><g><title>`0x7FFED73F7C2F (1 samples, 1.89%)</title><rect x="15.0943%" y="501" width="1.8868%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="15.3443%" y="511.50">`..</text></g><g><title>`0x7FFED74139A2 (1 samples, 1.89%)</title><rect x="15.0943%" y="485" width="1.8868%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="15.3443%" y="495.50">`..</text></g><g><title>`0x7FFED7413B20 (1 samples, 1.89%)</title><rect x="15.0943%" y="469" width="1.8868%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="15.3443%" y="479.50">`..</text></g><g><title>`0x7FFED740CD6B (1 samples, 1.89%)</title><rect x="15.0943%" y="453" width="1.8868%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="15.3443%" y="463.50">`..</text></g><g><title>`0x7FFED740CB80 (1 samples, 1.89%)</title><rect x="15.0943%" y="437" width="1.8868%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="15.3443%" y="447.50">`..</text></g><g><title>`0x7FFED922D249 (1 samples, 1.89%)</title><rect x="15.0943%" y="421" width="1.8868%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="15.3443%" y="431.50">`..</text></g><g><title>`0x7FFED922FF28 (1 samples, 1.89%)</title><rect x="15.0943%" y="405" width="1.8868%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="15.3443%" y="415.50">`..</text></g><g><title>`0x7FFED923A4CB (1 samples, 1.89%)</title><rect x="15.0943%" y="389" width="1.8868%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="1"/><text x="15.3443%" y="399.50">`..</text></g><g><title>`0x7FFED9239A31 (1 samples, 1.89%)</title><rect x="15.0943%" y="373" width="1.8868%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="1"/><text x="15.3443%" y="383.50">`..</text></g><g><title>`0x7FFED923930C (1 samples, 1.89%)</title><rect x="15.0943%" y="357" width="1.8868%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="1"/><text x="15.3443%" y="367.50">`..</text></g><g><title>`0x7FFED9239C89 (1 samples, 1.89%)</title><rect x="15.0943%" y="341" width="1.8868%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="1"/><text x="15.3443%" y="351.50">`..</text></g><g><title>`0x7FFED92228EA (1 samples, 1.89%)</title><rect x="15.0943%" y="325" width="1.8868%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="1"/><text x="15.3443%" y="335.50">`..</text></g><g><title>`0x7FFED926FAF2 (1 samples, 1.89%)</title><rect x="15.0943%" y="309" width="1.8868%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="1"/><text x="15.3443%" y="319.50">`..</text></g><g><title>`0x7FFED92905E4 (1 samples, 1.89%)</title><rect x="15.0943%" y="293" width="1.8868%" height="15" fill="rgb(231,138,38)" fg:x="8" fg:w="1"/><text x="15.3443%" y="303.50">`..</text></g><g><title>`0x7FFED6C1C099 (5 samples, 9.43%)</title><rect x="9.4340%" y="709" width="9.4340%" height="15" fill="rgb(231,145,46)" fg:x="5" fg:w="5"/><text x="9.6840%" y="719.50">`0x7FFED6C1C0..</text></g><g><title>`0x7FFED6C1BED8 (1 samples, 1.89%)</title><rect x="16.9811%" y="693" width="1.8868%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="1"/><text x="17.2311%" y="703.50">`..</text></g><g><title>`0x7FFED7547FCB (1 samples, 1.89%)</title><rect x="16.9811%" y="677" width="1.8868%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="1"/><text x="17.2311%" y="687.50">`..</text></g><g><title>`0x7FFED924118D (1 samples, 1.89%)</title><rect x="16.9811%" y="661" width="1.8868%" height="15" fill="rgb(247,81,37)" fg:x="9" fg:w="1"/><text x="17.2311%" y="671.50">`..</text></g><g><title>`0x7FFED9241596 (1 samples, 1.89%)</title><rect x="16.9811%" y="645" width="1.8868%" height="15" fill="rgb(209,12,38)" fg:x="9" fg:w="1"/><text x="17.2311%" y="655.50">`..</text></g><g><title>`0x7FFED9218B8F (1 samples, 1.89%)</title><rect x="16.9811%" y="629" width="1.8868%" height="15" fill="rgb(227,1,9)" fg:x="9" fg:w="1"/><text x="17.2311%" y="639.50">`..</text></g><g><title>`0x7FFED6882101 (1 samples, 1.89%)</title><rect x="16.9811%" y="613" width="1.8868%" height="15" fill="rgb(248,47,43)" fg:x="9" fg:w="1"/><text x="17.2311%" y="623.50">`..</text></g><g><title>`0x7FFED6882C5E (1 samples, 1.89%)</title><rect x="16.9811%" y="597" width="1.8868%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="1"/><text x="17.2311%" y="607.50">`..</text></g><g><title>`0x7FFED68BFE7E (1 samples, 1.89%)</title><rect x="16.9811%" y="581" width="1.8868%" height="15" fill="rgb(210,229,1)" fg:x="9" fg:w="1"/><text x="17.2311%" y="591.50">`..</text></g><g><title>`0x7FFED68BFEB4 (1 samples, 1.89%)</title><rect x="16.9811%" y="565" width="1.8868%" height="15" fill="rgb(222,148,37)" fg:x="9" fg:w="1"/><text x="17.2311%" y="575.50">`..</text></g><g><title>`0x7FFED68B2D96 (1 samples, 1.89%)</title><rect x="16.9811%" y="549" width="1.8868%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="1"/><text x="17.2311%" y="559.50">`..</text></g><g><title>`0x7FFED68B2ED8 (1 samples, 1.89%)</title><rect x="16.9811%" y="533" width="1.8868%" height="15" fill="rgb(247,98,35)" fg:x="9" fg:w="1"/><text x="17.2311%" y="543.50">`..</text></g><g><title>`0x7FFED68B2F9E (1 samples, 1.89%)</title><rect x="16.9811%" y="517" width="1.8868%" height="15" fill="rgb(247,138,52)" fg:x="9" fg:w="1"/><text x="17.2311%" y="527.50">`..</text></g><g><title>`0x7FFED68B3169 (1 samples, 1.89%)</title><rect x="16.9811%" y="501" width="1.8868%" height="15" fill="rgb(213,79,30)" fg:x="9" fg:w="1"/><text x="17.2311%" y="511.50">`..</text></g><g><title>`0x7FFED68B2AE3 (1 samples, 1.89%)</title><rect x="16.9811%" y="485" width="1.8868%" height="15" fill="rgb(246,177,23)" fg:x="9" fg:w="1"/><text x="17.2311%" y="495.50">`..</text></g><g><title>`0x7FFED68F4B40 (1 samples, 1.89%)</title><rect x="16.9811%" y="469" width="1.8868%" height="15" fill="rgb(230,62,27)" fg:x="9" fg:w="1"/><text x="17.2311%" y="479.50">`..</text></g><g><title>`0x7FFED9293154 (1 samples, 1.89%)</title><rect x="16.9811%" y="453" width="1.8868%" height="15" fill="rgb(216,154,8)" fg:x="9" fg:w="1"/><text x="17.2311%" y="463.50">`..</text></g><g><title>cssparser-rs.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::clear (1 samples, 1.89%)</title><rect x="22.6415%" y="533" width="1.8868%" height="15" fill="rgb(244,35,45)" fg:x="12" fg:w="1"/><text x="22.8915%" y="543.50">c..</text></g><g><title>cssparser-rs.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::extend_from_slice(ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="22.6415%" y="517" width="1.8868%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="1"/><text x="22.8915%" y="527.50">c..</text></g><g><title>cssparser-rs.exe`alloc::vec::spec_extend::impl$4::spec_extend(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::slice::iter::Iter (1 samples, 1.89%)</title><rect x="22.6415%" y="501" width="1.8868%" height="15" fill="rgb(240,54,50)" fg:x="12" fg:w="1"/><text x="22.8915%" y="511.50">c..</text></g><g><title>cssparser-rs.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::append_elements(ptr_const$&lt;slice2$ (1 samples, 1.89%)</title><rect x="22.6415%" y="485" width="1.8868%" height="15" fill="rgb(233,84,52)" fg:x="12" fg:w="1"/><text x="22.8915%" y="495.50">c..</text></g><g><title>`0x7FFEC4B614D2 (1 samples, 1.89%)</title><rect x="22.6415%" y="469" width="1.8868%" height="15" fill="rgb(207,117,47)" fg:x="12" fg:w="1"/><text x="22.8915%" y="479.50">`..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(alloc::vec::Vec (1 samples, 1.89%)</title><rect x="24.5283%" y="533" width="1.8868%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="1"/><text x="24.7783%" y="543.50">c..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec (1 samples, 1.89%)</title><rect x="24.5283%" y="517" width="1.8868%" height="15" fill="rgb(209,38,44)" fg:x="13" fg:w="1"/><text x="24.7783%" y="527.50">c..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec (1 samples, 1.89%)</title><rect x="24.5283%" y="501" width="1.8868%" height="15" fill="rgb(236,212,23)" fg:x="13" fg:w="1"/><text x="24.7783%" y="511.50">c..</text></g><g><title>cssparser-rs.exe`std::io::stdio::_print (1 samples, 1.89%)</title><rect x="24.5283%" y="485" width="1.8868%" height="15" fill="rgb(242,79,21)" fg:x="13" fg:w="1"/><text x="24.7783%" y="495.50">c..</text></g><g><title>cssparser-rs.exe`std::io::stdio::print_to (1 samples, 1.89%)</title><rect x="24.5283%" y="469" width="1.8868%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="1"/><text x="24.7783%" y="479.50">c..</text></g><g><title>cssparser-rs.exe`std::io::stdio::impl$16::write_fmt (1 samples, 1.89%)</title><rect x="24.5283%" y="453" width="1.8868%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="1"/><text x="24.7783%" y="463.50">c..</text></g><g><title>cssparser-rs.exe`std::io::Write::write_fmt (1 samples, 1.89%)</title><rect x="24.5283%" y="437" width="1.8868%" height="15" fill="rgb(211,81,21)" fg:x="13" fg:w="1"/><text x="24.7783%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`core::fmt::write (1 samples, 1.89%)</title><rect x="24.5283%" y="421" width="1.8868%" height="15" fill="rgb(208,190,38)" fg:x="13" fg:w="1"/><text x="24.7783%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`std::io::Write::write_fmt::impl$0::write_str&lt;std::io::stdio::StdoutLock&gt; (1 samples, 1.89%)</title><rect x="24.5283%" y="405" width="1.8868%" height="15" fill="rgb(235,213,38)" fg:x="13" fg:w="1"/><text x="24.7783%" y="415.50">c..</text></g><g><title>cssparser-rs.exe`std::io::stdio::impl$19::write_all (1 samples, 1.89%)</title><rect x="24.5283%" y="389" width="1.8868%" height="15" fill="rgb(237,122,38)" fg:x="13" fg:w="1"/><text x="24.7783%" y="399.50">c..</text></g><g><title>cssparser-rs.exe`std::sync::reentrant_lock::impl$11::deref (1 samples, 1.89%)</title><rect x="24.5283%" y="373" width="1.8868%" height="15" fill="rgb(244,218,35)" fg:x="13" fg:w="1"/><text x="24.7783%" y="383.50">c..</text></g><g><title>cssparser-rs.exe`std::io::buffered::linewritershim::impl$1::write_all (1 samples, 1.89%)</title><rect x="24.5283%" y="357" width="1.8868%" height="15" fill="rgb(240,68,47)" fg:x="13" fg:w="1"/><text x="24.7783%" y="367.50">c..</text></g><g><title>cssparser-rs.exe`core::result::impl$26::branch (1 samples, 1.89%)</title><rect x="24.5283%" y="341" width="1.8868%" height="15" fill="rgb(210,16,53)" fg:x="13" fg:w="1"/><text x="24.7783%" y="351.50">c..</text></g><g><title>cssparser-rs.exe`std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt; (1 samples, 1.89%)</title><rect x="24.5283%" y="325" width="1.8868%" height="15" fill="rgb(235,124,12)" fg:x="13" fg:w="1"/><text x="24.7783%" y="335.50">c..</text></g><g><title>cssparser-rs.exe`std::io::stdio::impl$1::write (1 samples, 1.89%)</title><rect x="24.5283%" y="309" width="1.8868%" height="15" fill="rgb(224,169,11)" fg:x="13" fg:w="1"/><text x="24.7783%" y="319.50">c..</text></g><g><title>cssparser-rs.exe`std::io::stdio::handle_ebadf (1 samples, 1.89%)</title><rect x="24.5283%" y="293" width="1.8868%" height="15" fill="rgb(250,166,2)" fg:x="13" fg:w="1"/><text x="24.7783%" y="303.50">c..</text></g><g><title>cssparser-rs.exe`std::sys::pal::windows::stdio::write (1 samples, 1.89%)</title><rect x="24.5283%" y="277" width="1.8868%" height="15" fill="rgb(242,216,29)" fg:x="13" fg:w="1"/><text x="24.7783%" y="287.50">c..</text></g><g><title>cssparser-rs.exe`std::sys::pal::windows::stdio::is_console (1 samples, 1.89%)</title><rect x="24.5283%" y="261" width="1.8868%" height="15" fill="rgb(230,116,27)" fg:x="13" fg:w="1"/><text x="24.7783%" y="271.50">c..</text></g><g><title>`0x7FFED6882F43 (1 samples, 1.89%)</title><rect x="24.5283%" y="245" width="1.8868%" height="15" fill="rgb(228,99,48)" fg:x="13" fg:w="1"/><text x="24.7783%" y="255.50">`..</text></g><g><title>`0x7FFED6883124 (1 samples, 1.89%)</title><rect x="24.5283%" y="229" width="1.8868%" height="15" fill="rgb(253,11,6)" fg:x="13" fg:w="1"/><text x="24.7783%" y="239.50">`..</text></g><g><title>`0x7FFED6883219 (1 samples, 1.89%)</title><rect x="24.5283%" y="213" width="1.8868%" height="15" fill="rgb(247,143,39)" fg:x="13" fg:w="1"/><text x="24.7783%" y="223.50">`..</text></g><g><title>`0x7FFED9290484 (1 samples, 1.89%)</title><rect x="24.5283%" y="197" width="1.8868%" height="15" fill="rgb(236,97,10)" fg:x="13" fg:w="1"/><text x="24.7783%" y="207.50">`..</text></g><g><title>`0x7FFED922B001 (1 samples, 1.89%)</title><rect x="26.4151%" y="309" width="1.8868%" height="15" fill="rgb(233,208,19)" fg:x="14" fg:w="1"/><text x="26.6651%" y="319.50">`..</text></g><g><title>`0x7FFED922C334 (1 samples, 1.89%)</title><rect x="26.4151%" y="293" width="1.8868%" height="15" fill="rgb(216,164,2)" fg:x="14" fg:w="1"/><text x="26.6651%" y="303.50">`..</text></g><g><title>`0x7FFED9229733 (1 samples, 1.89%)</title><rect x="26.4151%" y="277" width="1.8868%" height="15" fill="rgb(220,129,5)" fg:x="14" fg:w="1"/><text x="26.6651%" y="287.50">`..</text></g><g><title>`0x7FFED922B001 (1 samples, 1.89%)</title><rect x="30.1887%" y="165" width="1.8868%" height="15" fill="rgb(242,17,10)" fg:x="16" fg:w="1"/><text x="30.4387%" y="175.50">`..</text></g><g><title>`0x7FFED929D216 (1 samples, 1.89%)</title><rect x="30.1887%" y="149" width="1.8868%" height="15" fill="rgb(242,107,0)" fg:x="16" fg:w="1"/><text x="30.4387%" y="159.50">`..</text></g><g><title>`0x7FFED9237B75 (1 samples, 1.89%)</title><rect x="30.1887%" y="133" width="1.8868%" height="15" fill="rgb(251,28,31)" fg:x="16" fg:w="1"/><text x="30.4387%" y="143.50">`..</text></g><g><title>`0x7FFED9237C6B (1 samples, 1.89%)</title><rect x="30.1887%" y="117" width="1.8868%" height="15" fill="rgb(233,223,10)" fg:x="16" fg:w="1"/><text x="30.4387%" y="127.50">`..</text></g><g><title>`0x7FFED922B001 (1 samples, 1.89%)</title><rect x="30.1887%" y="101" width="1.8868%" height="15" fill="rgb(215,21,27)" fg:x="16" fg:w="1"/><text x="30.4387%" y="111.50">`..</text></g><g><title>`0x7FFED922C334 (1 samples, 1.89%)</title><rect x="30.1887%" y="85" width="1.8868%" height="15" fill="rgb(232,23,21)" fg:x="16" fg:w="1"/><text x="30.4387%" y="95.50">`..</text></g><g><title>`0x7FFED92299DE (1 samples, 1.89%)</title><rect x="30.1887%" y="69" width="1.8868%" height="15" fill="rgb(244,5,23)" fg:x="16" fg:w="1"/><text x="30.4387%" y="79.50">`..</text></g><g><title>`0x7FFED923472A (1 samples, 1.89%)</title><rect x="30.1887%" y="53" width="1.8868%" height="15" fill="rgb(226,81,46)" fg:x="16" fg:w="1"/><text x="30.4387%" y="63.50">`..</text></g><g><title>`0x7FFED9234A57 (1 samples, 1.89%)</title><rect x="30.1887%" y="37" width="1.8868%" height="15" fill="rgb(247,70,30)" fg:x="16" fg:w="1"/><text x="30.4387%" y="47.50">`..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place (4 samples, 7.55%)</title><rect x="26.4151%" y="533" width="7.5472%" height="15" fill="rgb(212,68,19)" fg:x="14" fg:w="4"/><text x="26.6651%" y="543.50">cssparser-..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(std::collections::hash::map::HashMap&lt;alloc::vec::Vec (4 samples, 7.55%)</title><rect x="26.4151%" y="517" width="7.5472%" height="15" fill="rgb(240,187,13)" fg:x="14" fg:w="4"/><text x="26.6651%" y="527.50">cssparser-..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::map::HashMap&lt;alloc::vec::Vec (4 samples, 7.55%)</title><rect x="26.4151%" y="501" width="7.5472%" height="15" fill="rgb(223,113,26)" fg:x="14" fg:w="4"/><text x="26.6651%" y="511.50">cssparser-..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec (4 samples, 7.55%)</title><rect x="26.4151%" y="485" width="7.5472%" height="15" fill="rgb(206,192,2)" fg:x="14" fg:w="4"/><text x="26.6651%" y="495.50">cssparser-..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::impl$18::drop&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec (4 samples, 7.55%)</title><rect x="26.4151%" y="469" width="7.5472%" height="15" fill="rgb(241,108,4)" fg:x="14" fg:w="4"/><text x="26.6651%" y="479.50">cssparser-..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::drop_inner_table (4 samples, 7.55%)</title><rect x="26.4151%" y="453" width="7.5472%" height="15" fill="rgb(247,173,49)" fg:x="14" fg:w="4"/><text x="26.6651%" y="463.50">cssparser-..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::drop_elements (4 samples, 7.55%)</title><rect x="26.4151%" y="437" width="7.5472%" height="15" fill="rgb(224,114,35)" fg:x="14" fg:w="4"/><text x="26.6651%" y="447.50">cssparser-..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt; &gt;::drop (4 samples, 7.55%)</title><rect x="26.4151%" y="421" width="7.5472%" height="15" fill="rgb(245,159,27)" fg:x="14" fg:w="4"/><text x="26.6651%" y="431.50">cssparser-..</text></g><g><title>cssparser-rs.exe`core::ptr::mut_ptr::impl$0::drop_in_place(tuple$&lt;alloc::vec::Vec (4 samples, 7.55%)</title><rect x="26.4151%" y="405" width="7.5472%" height="15" fill="rgb(245,172,44)" fg:x="14" fg:w="4"/><text x="26.6651%" y="415.50">cssparser-..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(tuple$&lt;alloc::vec::Vec (4 samples, 7.55%)</title><rect x="26.4151%" y="389" width="7.5472%" height="15" fill="rgb(236,23,11)" fg:x="14" fg:w="4"/><text x="26.6651%" y="399.50">cssparser-..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place (4 samples, 7.55%)</title><rect x="26.4151%" y="373" width="7.5472%" height="15" fill="rgb(205,117,38)" fg:x="14" fg:w="4"/><text x="26.6651%" y="383.50">cssparser-..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(std::collections::hash::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (4 samples, 7.55%)</title><rect x="26.4151%" y="357" width="7.5472%" height="15" fill="rgb(237,72,25)" fg:x="14" fg:w="4"/><text x="26.6651%" y="367.50">cssparser-..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (4 samples, 7.55%)</title><rect x="26.4151%" y="341" width="7.5472%" height="15" fill="rgb(244,70,9)" fg:x="14" fg:w="4"/><text x="26.6651%" y="351.50">cssparser-..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (4 samples, 7.55%)</title><rect x="26.4151%" y="325" width="7.5472%" height="15" fill="rgb(217,125,39)" fg:x="14" fg:w="4"/><text x="26.6651%" y="335.50">cssparser-..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::impl$18::drop&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (3 samples, 5.66%)</title><rect x="28.3019%" y="309" width="5.6604%" height="15" fill="rgb(235,36,10)" fg:x="15" fg:w="3"/><text x="28.5519%" y="319.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 5.66%)</title><rect x="28.3019%" y="293" width="5.6604%" height="15" fill="rgb(251,123,47)" fg:x="15" fg:w="3"/><text x="28.5519%" y="303.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::drop_elements (2 samples, 3.77%)</title><rect x="30.1887%" y="277" width="3.7736%" height="15" fill="rgb(221,13,13)" fg:x="16" fg:w="2"/><text x="30.4387%" y="287.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt;::drop (2 samples, 3.77%)</title><rect x="30.1887%" y="261" width="3.7736%" height="15" fill="rgb(238,131,9)" fg:x="16" fg:w="2"/><text x="30.4387%" y="271.50">cssp..</text></g><g><title>cssparser-rs.exe`core::ptr::mut_ptr::impl$0::drop_in_place(tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (2 samples, 3.77%)</title><rect x="30.1887%" y="245" width="3.7736%" height="15" fill="rgb(211,50,8)" fg:x="16" fg:w="2"/><text x="30.4387%" y="255.50">cssp..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (2 samples, 3.77%)</title><rect x="30.1887%" y="229" width="3.7736%" height="15" fill="rgb(245,182,24)" fg:x="16" fg:w="2"/><text x="30.4387%" y="239.50">cssp..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;ref$&lt;slice2$ (2 samples, 3.77%)</title><rect x="30.1887%" y="213" width="3.7736%" height="15" fill="rgb(242,14,37)" fg:x="16" fg:w="2"/><text x="30.4387%" y="223.50">cssp..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;ref$&lt;slice2$ (2 samples, 3.77%)</title><rect x="30.1887%" y="197" width="3.7736%" height="15" fill="rgb(246,228,12)" fg:x="16" fg:w="2"/><text x="30.4387%" y="207.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;ref$&lt;slice2$ (2 samples, 3.77%)</title><rect x="30.1887%" y="181" width="3.7736%" height="15" fill="rgb(213,55,15)" fg:x="16" fg:w="2"/><text x="30.4387%" y="191.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate (1 samples, 1.89%)</title><rect x="32.0755%" y="165" width="1.8868%" height="15" fill="rgb(209,9,3)" fg:x="17" fg:w="1"/><text x="32.3255%" y="175.50">c..</text></g><g><title>cssparser-rs.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (1 samples, 1.89%)</title><rect x="32.0755%" y="149" width="1.8868%" height="15" fill="rgb(230,59,30)" fg:x="17" fg:w="1"/><text x="32.3255%" y="159.50">c..</text></g><g><title>cssparser-rs.exe`alloc::alloc::dealloc (1 samples, 1.89%)</title><rect x="32.0755%" y="133" width="1.8868%" height="15" fill="rgb(209,121,21)" fg:x="17" fg:w="1"/><text x="32.3255%" y="143.50">c..</text></g><g><title>`0x7FFED922B001 (1 samples, 1.89%)</title><rect x="32.0755%" y="117" width="1.8868%" height="15" fill="rgb(220,109,13)" fg:x="17" fg:w="1"/><text x="32.3255%" y="127.50">`..</text></g><g><title>`0x7FFED922C381 (1 samples, 1.89%)</title><rect x="32.0755%" y="101" width="1.8868%" height="15" fill="rgb(232,18,1)" fg:x="17" fg:w="1"/><text x="32.3255%" y="111.50">`..</text></g><g><title>cssparser-rs.exe`alloc::vec::impl$11::clone(alloc::vec::Vec (1 samples, 1.89%)</title><rect x="35.8491%" y="501" width="1.8868%" height="15" fill="rgb(215,41,42)" fg:x="19" fg:w="1"/><text x="36.0991%" y="511.50">c..</text></g><g><title>cssparser-rs.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (1 samples, 1.89%)</title><rect x="35.8491%" y="485" width="1.8868%" height="15" fill="rgb(224,123,36)" fg:x="19" fg:w="1"/><text x="36.0991%" y="495.50">c..</text></g><g><title>cssparser-rs.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="35.8491%" y="469" width="1.8868%" height="15" fill="rgb(240,125,3)" fg:x="19" fg:w="1"/><text x="36.0991%" y="479.50">c..</text></g><g><title>cssparser-rs.exe`alloc::slice::hack::impl$1::to_vec(ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="35.8491%" y="453" width="1.8868%" height="15" fill="rgb(205,98,50)" fg:x="19" fg:w="1"/><text x="36.0991%" y="463.50">c..</text></g><g><title>cssparser-rs.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 1.89%)</title><rect x="35.8491%" y="437" width="1.8868%" height="15" fill="rgb(205,185,37)" fg:x="19" fg:w="1"/><text x="36.0991%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::RawVec&lt;u8,alloc::alloc::Global&gt;::with_capacity_in (1 samples, 1.89%)</title><rect x="35.8491%" y="421" width="1.8868%" height="15" fill="rgb(238,207,15)" fg:x="19" fg:w="1"/><text x="36.0991%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in (1 samples, 1.89%)</title><rect x="35.8491%" y="405" width="1.8868%" height="15" fill="rgb(213,199,42)" fg:x="19" fg:w="1"/><text x="36.0991%" y="415.50">c..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in (1 samples, 1.89%)</title><rect x="35.8491%" y="389" width="1.8868%" height="15" fill="rgb(235,201,11)" fg:x="19" fg:w="1"/><text x="36.0991%" y="399.50">c..</text></g><g><title>`0x7FFED922CCAA (1 samples, 1.89%)</title><rect x="35.8491%" y="373" width="1.8868%" height="15" fill="rgb(207,46,11)" fg:x="19" fg:w="1"/><text x="36.0991%" y="383.50">`..</text></g><g><title>`0x7FFED922D4F3 (1 samples, 1.89%)</title><rect x="35.8491%" y="357" width="1.8868%" height="15" fill="rgb(241,35,35)" fg:x="19" fg:w="1"/><text x="36.0991%" y="367.50">`..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 1.89%)</title><rect x="37.7358%" y="373" width="1.8868%" height="15" fill="rgb(243,32,47)" fg:x="20" fg:w="1"/><text x="37.9858%" y="383.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 1.89%)</title><rect x="37.7358%" y="357" width="1.8868%" height="15" fill="rgb(247,202,23)" fg:x="20" fg:w="1"/><text x="37.9858%" y="367.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 1.89%)</title><rect x="37.7358%" y="341" width="1.8868%" height="15" fill="rgb(219,102,11)" fg:x="20" fg:w="1"/><text x="37.9858%" y="351.50">c..</text></g><g><title>cssparser-rs.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::is_some (1 samples, 1.89%)</title><rect x="37.7358%" y="325" width="1.8868%" height="15" fill="rgb(243,110,44)" fg:x="20" fg:w="1"/><text x="37.9858%" y="335.50">c..</text></g><g><title>`0x7FFED9231931 (1 samples, 1.89%)</title><rect x="39.6226%" y="277" width="1.8868%" height="15" fill="rgb(222,74,54)" fg:x="21" fg:w="1"/><text x="39.8726%" y="287.50">`..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, alloc::vec::Vec (3 samples, 5.66%)</title><rect x="37.7358%" y="469" width="5.6604%" height="15" fill="rgb(216,99,12)" fg:x="20" fg:w="3"/><text x="37.9858%" y="479.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt;, hashbrown::map::make_hasher::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (3 samples, 5.66%)</title><rect x="37.7358%" y="453" width="5.6604%" height="15" fill="rgb(226,22,26)" fg:x="20" fg:w="3"/><text x="37.9858%" y="463.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (3 samples, 5.66%)</title><rect x="37.7358%" y="437" width="5.6604%" height="15" fill="rgb(217,163,10)" fg:x="20" fg:w="3"/><text x="37.9858%" y="447.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (3 samples, 5.66%)</title><rect x="37.7358%" y="421" width="5.6604%" height="15" fill="rgb(213,25,53)" fg:x="20" fg:w="3"/><text x="37.9858%" y="431.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (3 samples, 5.66%)</title><rect x="37.7358%" y="405" width="5.6604%" height="15" fill="rgb(252,105,26)" fg:x="20" fg:w="3"/><text x="37.9858%" y="415.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (3 samples, 5.66%)</title><rect x="37.7358%" y="389" width="5.6604%" height="15" fill="rgb(220,39,43)" fg:x="20" fg:w="3"/><text x="37.9858%" y="399.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::prepare_resize (2 samples, 3.77%)</title><rect x="39.6226%" y="373" width="3.7736%" height="15" fill="rgb(229,68,48)" fg:x="21" fg:w="2"/><text x="39.8726%" y="383.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::fallible_with_capacity (2 samples, 3.77%)</title><rect x="39.6226%" y="357" width="3.7736%" height="15" fill="rgb(252,8,32)" fg:x="21" fg:w="2"/><text x="39.8726%" y="367.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 3.77%)</title><rect x="39.6226%" y="341" width="3.7736%" height="15" fill="rgb(223,20,43)" fg:x="21" fg:w="2"/><text x="39.8726%" y="351.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::alloc::inner::do_alloc (2 samples, 3.77%)</title><rect x="39.6226%" y="325" width="3.7736%" height="15" fill="rgb(229,81,49)" fg:x="21" fg:w="2"/><text x="39.8726%" y="335.50">cssp..</text></g><g><title>`0x7FFED922CCAA (2 samples, 3.77%)</title><rect x="39.6226%" y="309" width="3.7736%" height="15" fill="rgb(236,28,36)" fg:x="21" fg:w="2"/><text x="39.8726%" y="319.50">`0x7..</text></g><g><title>`0x7FFED922DBCF (2 samples, 3.77%)</title><rect x="39.6226%" y="293" width="3.7736%" height="15" fill="rgb(249,185,26)" fg:x="21" fg:w="2"/><text x="39.8726%" y="303.50">`0x7..</text></g><g><title>`0x7FFED9231934 (1 samples, 1.89%)</title><rect x="41.5094%" y="277" width="1.8868%" height="15" fill="rgb(249,174,33)" fg:x="22" fg:w="1"/><text x="41.7594%" y="287.50">`..</text></g><g><title>cssparser-rs.exe`cssparser_rs::Properties::insert(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option&lt;ref$&lt;slice2$ (6 samples, 11.32%)</title><rect x="33.9623%" y="517" width="11.3208%" height="15" fill="rgb(233,201,37)" fg:x="18" fg:w="6"/><text x="34.2123%" y="527.50">cssparser-rs.exe`..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(enum2$&lt;core::option::Option&lt;alloc::vec::Vec&lt;ref$&lt;slice2$ (4 samples, 7.55%)</title><rect x="37.7358%" y="501" width="7.5472%" height="15" fill="rgb(221,78,26)" fg:x="20" fg:w="4"/><text x="37.9858%" y="511.50">cssparser-..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;, alloc::vec::Vec&lt;ref$&lt;slice2$ (4 samples, 7.55%)</title><rect x="37.7358%" y="485" width="7.5472%" height="15" fill="rgb(250,127,30)" fg:x="20" fg:w="4"/><text x="37.9858%" y="495.50">cssparser-..</text></g><g><title>cssparser-rs.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, alloc::vec::Vec (1 samples, 1.89%)</title><rect x="43.3962%" y="469" width="1.8868%" height="15" fill="rgb(230,49,44)" fg:x="23" fg:w="1"/><text x="43.6462%" y="479.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt;(std::hash::random::RandomState*, alloc::vec::Vec (1 samples, 1.89%)</title><rect x="43.3962%" y="453" width="1.8868%" height="15" fill="rgb(229,67,23)" fg:x="23" fg:w="1"/><text x="43.6462%" y="463.50">c..</text></g><g><title>cssparser-rs.exe`std::hash::random::impl$4::finish (1 samples, 1.89%)</title><rect x="43.3962%" y="437" width="1.8868%" height="15" fill="rgb(249,83,47)" fg:x="23" fg:w="1"/><text x="43.6462%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$4::finish (1 samples, 1.89%)</title><rect x="43.3962%" y="421" width="1.8868%" height="15" fill="rgb(215,43,3)" fg:x="23" fg:w="1"/><text x="43.6462%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1 samples, 1.89%)</title><rect x="43.3962%" y="405" width="1.8868%" height="15" fill="rgb(238,154,13)" fg:x="23" fg:w="1"/><text x="43.6462%" y="415.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$8::d_rounds (1 samples, 1.89%)</title><rect x="43.3962%" y="389" width="1.8868%" height="15" fill="rgb(219,56,2)" fg:x="23" fg:w="1"/><text x="43.6462%" y="399.50">c..</text></g><g><title>cssparser-rs.exe`cssparser_rs::Parser::add_property(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option&lt;ref$&lt;slice2$ (7 samples, 13.21%)</title><rect x="33.9623%" y="533" width="13.2075%" height="15" fill="rgb(233,0,4)" fg:x="18" fg:w="7"/><text x="34.2123%" y="543.50">cssparser-rs.exe`css..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties,std::hash::random::RandomState&gt;::get_mut(alloc::vec::Vec (1 samples, 1.89%)</title><rect x="45.2830%" y="517" width="1.8868%" height="15" fill="rgb(235,30,7)" fg:x="24" fg:w="1"/><text x="45.5330%" y="527.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_mut(alloc::vec::Vec (1 samples, 1.89%)</title><rect x="45.2830%" y="501" width="1.8868%" height="15" fill="rgb(250,79,13)" fg:x="24" fg:w="1"/><text x="45.5330%" y="511.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner_mut(alloc::vec::Vec (1 samples, 1.89%)</title><rect x="45.2830%" y="485" width="1.8868%" height="15" fill="rgb(211,146,34)" fg:x="24" fg:w="1"/><text x="45.5330%" y="495.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::get_mut(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec (1 samples, 1.89%)</title><rect x="45.2830%" y="469" width="1.8868%" height="15" fill="rgb(228,22,38)" fg:x="24" fg:w="1"/><text x="45.5330%" y="479.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec (1 samples, 1.89%)</title><rect x="45.2830%" y="453" width="1.8868%" height="15" fill="rgb(235,168,5)" fg:x="24" fg:w="1"/><text x="45.5330%" y="463.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (1 samples, 1.89%)</title><rect x="45.2830%" y="437" width="1.8868%" height="15" fill="rgb(221,155,16)" fg:x="24" fg:w="1"/><text x="45.5330%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::probe_seq (1 samples, 1.89%)</title><rect x="45.2830%" y="421" width="1.8868%" height="15" fill="rgb(215,215,53)" fg:x="24" fg:w="1"/><text x="45.5330%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt;(std::hash::random::RandomState*, alloc::vec::Vec (1 samples, 1.89%)</title><rect x="45.2830%" y="405" width="1.8868%" height="15" fill="rgb(223,4,10)" fg:x="24" fg:w="1"/><text x="45.5330%" y="415.50">c..</text></g><g><title>cssparser-rs.exe`std::hash::random::impl$4::finish (1 samples, 1.89%)</title><rect x="45.2830%" y="389" width="1.8868%" height="15" fill="rgb(234,103,6)" fg:x="24" fg:w="1"/><text x="45.5330%" y="399.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$4::finish (1 samples, 1.89%)</title><rect x="45.2830%" y="373" width="1.8868%" height="15" fill="rgb(227,97,0)" fg:x="24" fg:w="1"/><text x="45.5330%" y="383.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1 samples, 1.89%)</title><rect x="45.2830%" y="357" width="1.8868%" height="15" fill="rgb(234,150,53)" fg:x="24" fg:w="1"/><text x="45.5330%" y="367.50">c..</text></g><g><title>cssparser-rs.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="45.2830%" y="341" width="1.8868%" height="15" fill="rgb(228,201,54)" fg:x="24" fg:w="1"/><text x="45.5330%" y="351.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="45.2830%" y="325" width="1.8868%" height="15" fill="rgb(222,22,37)" fg:x="24" fg:w="1"/><text x="45.5330%" y="335.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$5::write(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="45.2830%" y="309" width="1.8868%" height="15" fill="rgb(237,53,32)" fg:x="24" fg:w="1"/><text x="45.5330%" y="319.50">c..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place (1 samples, 1.89%)</title><rect x="47.1698%" y="501" width="1.8868%" height="15" fill="rgb(233,25,53)" fg:x="25" fg:w="1"/><text x="47.4198%" y="511.50">c..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(std::collections::hash::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="47.1698%" y="485" width="1.8868%" height="15" fill="rgb(210,40,34)" fg:x="25" fg:w="1"/><text x="47.4198%" y="495.50">c..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="47.1698%" y="469" width="1.8868%" height="15" fill="rgb(241,220,44)" fg:x="25" fg:w="1"/><text x="47.4198%" y="479.50">c..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="47.1698%" y="453" width="1.8868%" height="15" fill="rgb(235,28,35)" fg:x="25" fg:w="1"/><text x="47.4198%" y="463.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::impl$18::drop&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;(hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="47.1698%" y="437" width="1.8868%" height="15" fill="rgb(210,56,17)" fg:x="25" fg:w="1"/><text x="47.4198%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 1.89%)</title><rect x="47.1698%" y="421" width="1.8868%" height="15" fill="rgb(224,130,29)" fg:x="25" fg:w="1"/><text x="47.4198%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::drop_elements (1 samples, 1.89%)</title><rect x="47.1698%" y="405" width="1.8868%" height="15" fill="rgb(235,212,8)" fg:x="25" fg:w="1"/><text x="47.4198%" y="415.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::Bucket&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt; &gt;::drop (1 samples, 1.89%)</title><rect x="47.1698%" y="389" width="1.8868%" height="15" fill="rgb(223,33,50)" fg:x="25" fg:w="1"/><text x="47.4198%" y="399.50">c..</text></g><g><title>cssparser-rs.exe`core::ptr::mut_ptr::impl$0::drop_in_place(tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="47.1698%" y="373" width="1.8868%" height="15" fill="rgb(219,149,13)" fg:x="25" fg:w="1"/><text x="47.4198%" y="383.50">c..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="47.1698%" y="357" width="1.8868%" height="15" fill="rgb(250,156,29)" fg:x="25" fg:w="1"/><text x="47.4198%" y="367.50">c..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(alloc::vec::Vec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="47.1698%" y="341" width="1.8868%" height="15" fill="rgb(216,193,19)" fg:x="25" fg:w="1"/><text x="47.4198%" y="351.50">c..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(alloc::raw_vec::RawVec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="47.1698%" y="325" width="1.8868%" height="15" fill="rgb(216,135,14)" fg:x="25" fg:w="1"/><text x="47.4198%" y="335.50">c..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::impl$4::drop(alloc::raw_vec::RawVec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="47.1698%" y="309" width="1.8868%" height="15" fill="rgb(241,47,5)" fg:x="25" fg:w="1"/><text x="47.4198%" y="319.50">c..</text></g><g><title>`0x7FFED922B001 (1 samples, 1.89%)</title><rect x="47.1698%" y="293" width="1.8868%" height="15" fill="rgb(233,42,35)" fg:x="25" fg:w="1"/><text x="47.4198%" y="303.50">`..</text></g><g><title>`0x7FFED922BFA1 (1 samples, 1.89%)</title><rect x="47.1698%" y="277" width="1.8868%" height="15" fill="rgb(231,13,6)" fg:x="25" fg:w="1"/><text x="47.4198%" y="287.50">`..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;alloc::vec::Vec (1 samples, 1.89%)</title><rect x="49.0566%" y="453" width="1.8868%" height="15" fill="rgb(207,181,40)" fg:x="26" fg:w="1"/><text x="49.3066%" y="463.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;alloc::vec::Vec (1 samples, 1.89%)</title><rect x="49.0566%" y="437" width="1.8868%" height="15" fill="rgb(254,173,49)" fg:x="26" fg:w="1"/><text x="49.3066%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (1 samples, 1.89%)</title><rect x="49.0566%" y="421" width="1.8868%" height="15" fill="rgb(221,1,38)" fg:x="26" fg:w="1"/><text x="49.3066%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (1 samples, 1.89%)</title><rect x="49.0566%" y="405" width="1.8868%" height="15" fill="rgb(206,124,46)" fg:x="26" fg:w="1"/><text x="49.3066%" y="415.50">c..</text></g><g><title>cssparser-rs.exe`core::intrinsics::copy_nonoverlapping (1 samples, 1.89%)</title><rect x="49.0566%" y="389" width="1.8868%" height="15" fill="rgb(249,21,11)" fg:x="26" fg:w="1"/><text x="49.3066%" y="399.50">c..</text></g><g><title>cssparser-rs.exe`cssparser_rs::Parser::create_selector(alloc::vec::Vec (3 samples, 5.66%)</title><rect x="47.1698%" y="533" width="5.6604%" height="15" fill="rgb(222,201,40)" fg:x="25" fg:w="3"/><text x="47.4198%" y="543.50">csspars..</text></g><g><title>cssparser-rs.exe`core::ptr::drop_in_place(enum2$&lt;core::option::Option (3 samples, 5.66%)</title><rect x="47.1698%" y="517" width="5.6604%" height="15" fill="rgb(235,61,29)" fg:x="25" fg:w="3"/><text x="47.4198%" y="527.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;(alloc::vec::Vec (2 samples, 3.77%)</title><rect x="49.0566%" y="501" width="3.7736%" height="15" fill="rgb(219,207,3)" fg:x="26" fg:w="2"/><text x="49.3066%" y="511.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, alloc::vec::Vec (2 samples, 3.77%)</title><rect x="49.0566%" y="485" width="3.7736%" height="15" fill="rgb(222,56,46)" fg:x="26" fg:w="2"/><text x="49.3066%" y="495.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt;, hashbrown::map::make_hasher::closure_env$0&lt;alloc::vec::Vec (2 samples, 3.77%)</title><rect x="49.0566%" y="469" width="3.7736%" height="15" fill="rgb(239,76,54)" fg:x="26" fg:w="2"/><text x="49.3066%" y="479.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (1 samples, 1.89%)</title><rect x="50.9434%" y="453" width="1.8868%" height="15" fill="rgb(231,124,27)" fg:x="27" fg:w="1"/><text x="51.1934%" y="463.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::control::group::sse2::Group::match_tag (1 samples, 1.89%)</title><rect x="50.9434%" y="437" width="1.8868%" height="15" fill="rgb(249,195,6)" fg:x="27" fg:w="1"/><text x="51.1934%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 1.89%)</title><rect x="50.9434%" y="421" width="1.8868%" height="15" fill="rgb(237,174,47)" fg:x="27" fg:w="1"/><text x="51.1934%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, alloc::vec::Vec (1 samples, 1.89%)</title><rect x="52.8302%" y="469" width="1.8868%" height="15" fill="rgb(206,201,31)" fg:x="28" fg:w="1"/><text x="53.0802%" y="479.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt;(std::hash::random::RandomState*, alloc::vec::Vec (1 samples, 1.89%)</title><rect x="52.8302%" y="453" width="1.8868%" height="15" fill="rgb(231,57,52)" fg:x="28" fg:w="1"/><text x="53.0802%" y="463.50">c..</text></g><g><title>cssparser-rs.exe`std::hash::random::impl$4::finish (1 samples, 1.89%)</title><rect x="52.8302%" y="437" width="1.8868%" height="15" fill="rgb(248,177,22)" fg:x="28" fg:w="1"/><text x="53.0802%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$4::finish (1 samples, 1.89%)</title><rect x="52.8302%" y="421" width="1.8868%" height="15" fill="rgb(215,211,37)" fg:x="28" fg:w="1"/><text x="53.0802%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1 samples, 1.89%)</title><rect x="52.8302%" y="405" width="1.8868%" height="15" fill="rgb(241,128,51)" fg:x="28" fg:w="1"/><text x="53.0802%" y="415.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$8::d_rounds (1 samples, 1.89%)</title><rect x="52.8302%" y="389" width="1.8868%" height="15" fill="rgb(227,165,31)" fg:x="28" fg:w="1"/><text x="53.0802%" y="399.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::control::group::sse2::Group::match_empty (1 samples, 1.89%)</title><rect x="54.7170%" y="421" width="1.8868%" height="15" fill="rgb(228,167,24)" fg:x="29" fg:w="1"/><text x="54.9670%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::control::group::sse2::Group::match_tag (1 samples, 1.89%)</title><rect x="54.7170%" y="405" width="1.8868%" height="15" fill="rgb(228,143,12)" fg:x="29" fg:w="1"/><text x="54.9670%" y="415.50">c..</text></g><g><title>cssparser-rs.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 1.89%)</title><rect x="54.7170%" y="389" width="1.8868%" height="15" fill="rgb(249,149,8)" fg:x="29" fg:w="1"/><text x="54.9670%" y="399.50">c..</text></g><g><title>cssparser-rs.exe`cssparser_rs::Parser::update_property(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, ref$&lt;slice2$ (3 samples, 5.66%)</title><rect x="52.8302%" y="533" width="5.6604%" height="15" fill="rgb(243,35,44)" fg:x="28" fg:w="3"/><text x="53.0802%" y="543.50">csspars..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties,std::hash::random::RandomState&gt;::contains_key(alloc::vec::Vec (3 samples, 5.66%)</title><rect x="52.8302%" y="517" width="5.6604%" height="15" fill="rgb(246,89,9)" fg:x="28" fg:w="3"/><text x="53.0802%" y="527.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::contains_key(alloc::vec::Vec (3 samples, 5.66%)</title><rect x="52.8302%" y="501" width="5.6604%" height="15" fill="rgb(233,213,13)" fg:x="28" fg:w="3"/><text x="53.0802%" y="511.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner(alloc::vec::Vec (3 samples, 5.66%)</title><rect x="52.8302%" y="485" width="5.6604%" height="15" fill="rgb(233,141,41)" fg:x="28" fg:w="3"/><text x="53.0802%" y="495.50">csspars..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::get(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec (2 samples, 3.77%)</title><rect x="54.7170%" y="469" width="3.7736%" height="15" fill="rgb(239,167,4)" fg:x="29" fg:w="2"/><text x="54.9670%" y="479.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,cssparser_rs::Properties&gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec (2 samples, 3.77%)</title><rect x="54.7170%" y="453" width="3.7736%" height="15" fill="rgb(209,217,16)" fg:x="29" fg:w="2"/><text x="54.9670%" y="463.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (2 samples, 3.77%)</title><rect x="54.7170%" y="437" width="3.7736%" height="15" fill="rgb(219,88,35)" fg:x="29" fg:w="2"/><text x="54.9670%" y="447.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::control::tag::Tag::full (1 samples, 1.89%)</title><rect x="56.6038%" y="421" width="1.8868%" height="15" fill="rgb(220,193,23)" fg:x="30" fg:w="1"/><text x="56.8538%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;::push(ref$&lt;slice2$ (2 samples, 3.77%)</title><rect x="58.4906%" y="517" width="3.7736%" height="15" fill="rgb(230,90,52)" fg:x="31" fg:w="2"/><text x="58.7406%" y="527.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;::as_mut_ptr (2 samples, 3.77%)</title><rect x="58.4906%" y="501" width="3.7736%" height="15" fill="rgb(252,106,19)" fg:x="31" fg:w="2"/><text x="58.7406%" y="511.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::RawVec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;::ptr (2 samples, 3.77%)</title><rect x="58.4906%" y="485" width="3.7736%" height="15" fill="rgb(206,74,20)" fg:x="31" fg:w="2"/><text x="58.7406%" y="495.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (2 samples, 3.77%)</title><rect x="58.4906%" y="469" width="3.7736%" height="15" fill="rgb(230,138,44)" fg:x="31" fg:w="2"/><text x="58.7406%" y="479.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (2 samples, 3.77%)</title><rect x="58.4906%" y="453" width="3.7736%" height="15" fill="rgb(235,182,43)" fg:x="31" fg:w="2"/><text x="58.7406%" y="463.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::RawVec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;::grow_one&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; (2 samples, 3.77%)</title><rect x="58.4906%" y="437" width="3.7736%" height="15" fill="rgb(242,16,51)" fg:x="31" fg:w="2"/><text x="58.7406%" y="447.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_one (2 samples, 3.77%)</title><rect x="58.4906%" y="421" width="3.7736%" height="15" fill="rgb(248,9,4)" fg:x="31" fg:w="2"/><text x="58.7406%" y="431.50">cssp..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::grow_amortized (2 samples, 3.77%)</title><rect x="58.4906%" y="405" width="3.7736%" height="15" fill="rgb(210,31,22)" fg:x="31" fg:w="2"/><text x="58.7406%" y="415.50">cssp..</text></g><g><title>cssparser-rs.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$ (1 samples, 1.89%)</title><rect x="60.3774%" y="389" width="1.8868%" height="15" fill="rgb(239,54,39)" fg:x="32" fg:w="1"/><text x="60.6274%" y="399.50">c..</text></g><g><title>cssparser-rs.exe`alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;(core::alloc::layout::Layout, enum2$&lt;core::option::Option&lt;tuple$&lt;core::ptr::non_null::NonNull (1 samples, 1.89%)</title><rect x="60.3774%" y="373" width="1.8868%" height="15" fill="rgb(230,99,41)" fg:x="32" fg:w="1"/><text x="60.6274%" y="383.50">c..</text></g><g><title>cssparser-rs.exe`enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;::map_err(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;,core::alloc::AllocError&gt; &gt;, alloc::raw_vec::finish_grow::closure_env$0 (1 samples, 1.89%)</title><rect x="60.3774%" y="357" width="1.8868%" height="15" fill="rgb(253,106,12)" fg:x="32" fg:w="1"/><text x="60.6274%" y="367.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::map::make_hash(std::hash::random::RandomState*, alloc::vec::Vec (1 samples, 1.89%)</title><rect x="62.2642%" y="469" width="1.8868%" height="15" fill="rgb(213,46,41)" fg:x="33" fg:w="1"/><text x="62.5142%" y="479.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt; &gt;(std::hash::random::RandomState*, alloc::vec::Vec (1 samples, 1.89%)</title><rect x="62.2642%" y="453" width="1.8868%" height="15" fill="rgb(215,133,35)" fg:x="33" fg:w="1"/><text x="62.5142%" y="463.50">c..</text></g><g><title>cssparser-rs.exe`std::hash::random::impl$4::finish (1 samples, 1.89%)</title><rect x="62.2642%" y="437" width="1.8868%" height="15" fill="rgb(213,28,5)" fg:x="33" fg:w="1"/><text x="62.5142%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$4::finish (1 samples, 1.89%)</title><rect x="62.2642%" y="421" width="1.8868%" height="15" fill="rgb(215,77,49)" fg:x="33" fg:w="1"/><text x="62.5142%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1 samples, 1.89%)</title><rect x="62.2642%" y="405" width="1.8868%" height="15" fill="rgb(248,100,22)" fg:x="33" fg:w="1"/><text x="62.5142%" y="415.50">c..</text></g><g><title>cssparser-rs.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="62.2642%" y="389" width="1.8868%" height="15" fill="rgb(208,67,9)" fg:x="33" fg:w="1"/><text x="62.5142%" y="399.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="62.2642%" y="373" width="1.8868%" height="15" fill="rgb(219,133,21)" fg:x="33" fg:w="1"/><text x="62.5142%" y="383.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::impl$5::write(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="62.2642%" y="357" width="1.8868%" height="15" fill="rgb(246,46,29)" fg:x="33" fg:w="1"/><text x="62.5142%" y="367.50">c..</text></g><g><title>cssparser-rs.exe`core::hash::sip::u8to64_le(ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="62.2642%" y="341" width="1.8868%" height="15" fill="rgb(246,185,52)" fg:x="33" fg:w="1"/><text x="62.5142%" y="351.50">c..</text></g><g><title>cssparser-rs.exe`cssparser_rs::Properties::insert(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, enum2$&lt;core::option::Option&lt;ref$&lt;slice2$ (4 samples, 7.55%)</title><rect x="58.4906%" y="533" width="7.5472%" height="15" fill="rgb(252,136,11)" fg:x="31" fg:w="4"/><text x="58.7406%" y="543.50">cssparser-..</text></g><g><title>cssparser-rs.exe`std::collections::hash::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;,std::hash::random::RandomState&gt;::contains_key(alloc::vec::Vec (2 samples, 3.77%)</title><rect x="62.2642%" y="517" width="3.7736%" height="15" fill="rgb(219,138,53)" fg:x="33" fg:w="2"/><text x="62.5142%" y="527.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::contains_key(alloc::vec::Vec (2 samples, 3.77%)</title><rect x="62.2642%" y="501" width="3.7736%" height="15" fill="rgb(211,51,23)" fg:x="33" fg:w="2"/><text x="62.5142%" y="511.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::get_inner(alloc::vec::Vec (2 samples, 3.77%)</title><rect x="62.2642%" y="485" width="3.7736%" height="15" fill="rgb(247,221,28)" fg:x="33" fg:w="2"/><text x="62.5142%" y="495.50">cssp..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::get(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="64.1509%" y="469" width="1.8868%" height="15" fill="rgb(251,222,45)" fg:x="34" fg:w="1"/><text x="64.4009%" y="479.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::find(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="64.1509%" y="453" width="1.8868%" height="15" fill="rgb(217,162,53)" fg:x="34" fg:w="1"/><text x="64.4009%" y="463.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::RawTableInner::find_inner(unsigned long long, ref_mut$&lt;dyn$&lt;core::ops::function::FnMut&lt;tuple$&lt;usize&gt;,assoc$ (1 samples, 1.89%)</title><rect x="64.1509%" y="437" width="1.8868%" height="15" fill="rgb(229,93,14)" fg:x="34" fg:w="1"/><text x="64.4009%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`hashbrown::raw::impl$8::find::closure$0(hashbrown::raw::impl$8::find::closure_env$0&lt;tuple$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$&lt;u8&gt; &gt;,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global,hashbrown::map::equivalent_key::closure_env$0&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;,alloc::vec::Vec&lt;ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="64.1509%" y="421" width="1.8868%" height="15" fill="rgb(209,67,49)" fg:x="34" fg:w="1"/><text x="64.4009%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`logos::lexer::impl$8::bump_unchecked(logos::lexer::Lexer&lt;enum2$ (1 samples, 1.89%)</title><rect x="67.9245%" y="437" width="1.8868%" height="15" fill="rgb(213,87,29)" fg:x="36" fg:w="1"/><text x="68.1745%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`logos::lexer::impl$3::next(logos::lexer::Lexer&lt;enum2$ (3 samples, 5.66%)</title><rect x="66.0377%" y="533" width="5.6604%" height="15" fill="rgb(205,151,52)" fg:x="35" fg:w="3"/><text x="66.2877%" y="543.50">csspars..</text></g><g><title>cssparser-rs.exe`core::mem::manually_drop::ManuallyDrop&lt;enum2$&lt;core::option::Option&lt;enum2$&lt;core::result::Result&lt;enum2$&lt;cssparser_rs::Token&gt;,tuple$&lt;&gt; &gt; &gt; &gt; &gt; &gt;::take (3 samples, 5.66%)</title><rect x="66.0377%" y="517" width="5.6604%" height="15" fill="rgb(253,215,39)" fg:x="35" fg:w="3"/><text x="66.2877%" y="527.50">csspars..</text></g><g><title>cssparser-rs.exe`core::ptr::read(enum2$&lt;core::option::Option&lt;enum2$&lt;core::result::Result&lt;enum2$&lt;cssparser_rs::Token&gt;,tuple$ (3 samples, 5.66%)</title><rect x="66.0377%" y="501" width="5.6604%" height="15" fill="rgb(221,220,41)" fg:x="35" fg:w="3"/><text x="66.2877%" y="511.50">csspars..</text></g><g><title>cssparser-rs.exe`cssparser_rs::impl$0::lex(logos::lexer::Lexer&lt;enum2$ (3 samples, 5.66%)</title><rect x="66.0377%" y="485" width="5.6604%" height="15" fill="rgb(218,133,21)" fg:x="35" fg:w="3"/><text x="66.2877%" y="495.50">csspars..</text></g><g><title>cssparser-rs.exe`cssparser_rs::impl$0::lex::goto163(logos::lexer::Lexer&lt;enum2$ (3 samples, 5.66%)</title><rect x="66.0377%" y="469" width="5.6604%" height="15" fill="rgb(221,193,43)" fg:x="35" fg:w="3"/><text x="66.2877%" y="479.50">csspars..</text></g><g><title>cssparser-rs.exe`cssparser_rs::impl$0::lex::goto158_ctx36_x(logos::lexer::Lexer&lt;enum2$ (2 samples, 3.77%)</title><rect x="67.9245%" y="453" width="3.7736%" height="15" fill="rgb(240,128,52)" fg:x="36" fg:w="2"/><text x="68.1745%" y="463.50">cssp..</text></g><g><title>cssparser-rs.exe`logos::lexer::impl$8::read(logos::lexer::Lexer&lt;enum2$ (1 samples, 1.89%)</title><rect x="69.8113%" y="437" width="1.8868%" height="15" fill="rgb(253,114,12)" fg:x="37" fg:w="1"/><text x="70.0613%" y="447.50">c..</text></g><g><title>cssparser-rs.exe`logos::source::impl$0::read(ref$ (1 samples, 1.89%)</title><rect x="69.8113%" y="421" width="1.8868%" height="15" fill="rgb(215,223,47)" fg:x="37" fg:w="1"/><text x="70.0613%" y="431.50">c..</text></g><g><title>cssparser-rs.exe`logos::source::impl$3::from_ptr (1 samples, 1.89%)</title><rect x="69.8113%" y="405" width="1.8868%" height="15" fill="rgb(248,225,23)" fg:x="37" fg:w="1"/><text x="70.0613%" y="415.50">c..</text></g><g><title>`0x7FFED924AF38 (37 samples, 69.81%)</title><rect x="3.7736%" y="757" width="69.8113%" height="15" fill="rgb(250,108,0)" fg:x="2" fg:w="37"/><text x="4.0236%" y="767.50">`0x7FFED924AF38</text></g><g><title>`0x7FFED754259D (37 samples, 69.81%)</title><rect x="3.7736%" y="741" width="69.8113%" height="15" fill="rgb(228,208,7)" fg:x="2" fg:w="37"/><text x="4.0236%" y="751.50">`0x7FFED754259D</text></g><g><title>cssparser-rs.exe`__scrt_common_main_seh() (34 samples, 64.15%)</title><rect x="9.4340%" y="725" width="64.1509%" height="15" fill="rgb(244,45,10)" fg:x="5" fg:w="34"/><text x="9.6840%" y="735.50">cssparser-rs.exe`__scrt_common_main_seh()</text></g><g><title>cssparser-rs.exe`invoke_main() (29 samples, 54.72%)</title><rect x="18.8679%" y="709" width="54.7170%" height="15" fill="rgb(207,125,25)" fg:x="10" fg:w="29"/><text x="19.1179%" y="719.50">cssparser-rs.exe`invoke_main()</text></g><g><title>cssparser-rs.exe`main (29 samples, 54.72%)</title><rect x="18.8679%" y="693" width="54.7170%" height="15" fill="rgb(210,195,18)" fg:x="10" fg:w="29"/><text x="19.1179%" y="703.50">cssparser-rs.exe`main</text></g><g><title>cssparser-rs.exe`std::rt::lang_start_internal (29 samples, 54.72%)</title><rect x="18.8679%" y="677" width="54.7170%" height="15" fill="rgb(249,80,12)" fg:x="10" fg:w="29"/><text x="19.1179%" y="687.50">cssparser-rs.exe`std::rt::lang_start_internal</text></g><g><title>cssparser-rs.exe`std::panic::catch_unwind (29 samples, 54.72%)</title><rect x="18.8679%" y="661" width="54.7170%" height="15" fill="rgb(221,65,9)" fg:x="10" fg:w="29"/><text x="19.1179%" y="671.50">cssparser-rs.exe`std::panic::catch_unwind</text></g><g><title>cssparser-rs.exe`std::panicking::try (29 samples, 54.72%)</title><rect x="18.8679%" y="645" width="54.7170%" height="15" fill="rgb(235,49,36)" fg:x="10" fg:w="29"/><text x="19.1179%" y="655.50">cssparser-rs.exe`std::panicking::try</text></g><g><title>cssparser-rs.exe`std::panicking::try::do_call (29 samples, 54.72%)</title><rect x="18.8679%" y="629" width="54.7170%" height="15" fill="rgb(225,32,20)" fg:x="10" fg:w="29"/><text x="19.1179%" y="639.50">cssparser-rs.exe`std::panicking::try::do_call</text></g><g><title>cssparser-rs.exe`std::rt::lang_start_internal::closure$1 (29 samples, 54.72%)</title><rect x="18.8679%" y="613" width="54.7170%" height="15" fill="rgb(215,141,46)" fg:x="10" fg:w="29"/><text x="19.1179%" y="623.50">cssparser-rs.exe`std::rt::lang_start_internal::closure$1</text></g><g><title>cssparser-rs.exe`std::panic::catch_unwind (29 samples, 54.72%)</title><rect x="18.8679%" y="597" width="54.7170%" height="15" fill="rgb(250,160,47)" fg:x="10" fg:w="29"/><text x="19.1179%" y="607.50">cssparser-rs.exe`std::panic::catch_unwind</text></g><g><title>cssparser-rs.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (29 samples, 54.72%)</title><rect x="18.8679%" y="581" width="54.7170%" height="15" fill="rgb(216,222,40)" fg:x="10" fg:w="29"/><text x="19.1179%" y="591.50">cssparser-rs.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_en..</text></g><g><title>cssparser-rs.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (28 samples, 52.83%)</title><rect x="20.7547%" y="565" width="52.8302%" height="15" fill="rgb(234,217,39)" fg:x="11" fg:w="28"/><text x="21.0047%" y="575.50">cssparser-rs.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; ..</text></g><g><title>cssparser-rs.exe`cssparser_rs::main (28 samples, 52.83%)</title><rect x="20.7547%" y="549" width="52.8302%" height="15" fill="rgb(207,178,40)" fg:x="11" fg:w="28"/><text x="21.0047%" y="559.50">cssparser-rs.exe`cssparser_rs::main</text></g><g><title>cssparser-rs.exe`std::io::impls::impl$11::write(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="71.6981%" y="533" width="1.8868%" height="15" fill="rgb(221,136,13)" fg:x="38" fg:w="1"/><text x="71.9481%" y="543.50">c..</text></g><g><title>cssparser-rs.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::extend_from_slice(ref$&lt;slice2$ (1 samples, 1.89%)</title><rect x="71.6981%" y="517" width="1.8868%" height="15" fill="rgb(249,199,10)" fg:x="38" fg:w="1"/><text x="71.9481%" y="527.50">c..</text></g><g><title>cssparser-rs.exe`alloc::vec::spec_extend::impl$4::spec_extend(alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;*, core::slice::iter::Iter (1 samples, 1.89%)</title><rect x="71.6981%" y="501" width="1.8868%" height="15" fill="rgb(249,222,13)" fg:x="38" fg:w="1"/><text x="71.9481%" y="511.50">c..</text></g><g><title>cssparser-rs.exe`alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt;::append_elements(ptr_const$&lt;slice2$ (1 samples, 1.89%)</title><rect x="71.6981%" y="485" width="1.8868%" height="15" fill="rgb(244,185,38)" fg:x="38" fg:w="1"/><text x="71.9481%" y="495.50">c..</text></g><g><title>`0x7FFEC4B614DC (1 samples, 1.89%)</title><rect x="71.6981%" y="469" width="1.8868%" height="15" fill="rgb(236,202,9)" fg:x="38" fg:w="1"/><text x="71.9481%" y="479.50">`..</text></g><g><title>`0x7FFED92CD936 (1 samples, 1.89%)</title><rect x="73.5849%" y="709" width="1.8868%" height="15" fill="rgb(250,229,37)" fg:x="39" fg:w="1"/><text x="73.8349%" y="719.50">`..</text></g><g><title>`0x7FFED92A0569 (1 samples, 1.89%)</title><rect x="73.5849%" y="693" width="1.8868%" height="15" fill="rgb(206,174,23)" fg:x="39" fg:w="1"/><text x="73.8349%" y="703.50">`..</text></g><g><title>`0x7FFED9311D15 (1 samples, 1.89%)</title><rect x="73.5849%" y="677" width="1.8868%" height="15" fill="rgb(211,33,43)" fg:x="39" fg:w="1"/><text x="73.8349%" y="687.50">`..</text></g><g><title>`0x7FFED92A11E1 (1 samples, 1.89%)</title><rect x="73.5849%" y="661" width="1.8868%" height="15" fill="rgb(245,58,50)" fg:x="39" fg:w="1"/><text x="73.8349%" y="671.50">`..</text></g><g><title>`0x7FFED92374D5 (1 samples, 1.89%)</title><rect x="73.5849%" y="645" width="1.8868%" height="15" fill="rgb(244,68,36)" fg:x="39" fg:w="1"/><text x="73.8349%" y="655.50">`..</text></g><g><title>`0x7FFED9291254 (1 samples, 1.89%)</title><rect x="73.5849%" y="629" width="1.8868%" height="15" fill="rgb(232,229,15)" fg:x="39" fg:w="1"/><text x="73.8349%" y="639.50">`..</text></g><g><title>`0x7FFED92CDB45 (1 samples, 1.89%)</title><rect x="75.4717%" y="709" width="1.8868%" height="15" fill="rgb(254,30,23)" fg:x="40" fg:w="1"/><text x="75.7217%" y="719.50">`..</text></g><g><title>`0x7FFED924860A (1 samples, 1.89%)</title><rect x="75.4717%" y="693" width="1.8868%" height="15" fill="rgb(235,160,14)" fg:x="40" fg:w="1"/><text x="75.7217%" y="703.50">`..</text></g><g><title>`0x7FFED9248CCF (1 samples, 1.89%)</title><rect x="75.4717%" y="677" width="1.8868%" height="15" fill="rgb(212,155,44)" fg:x="40" fg:w="1"/><text x="75.7217%" y="687.50">`..</text></g><g><title>`0x7FFED9248D74 (1 samples, 1.89%)</title><rect x="75.4717%" y="661" width="1.8868%" height="15" fill="rgb(226,2,50)" fg:x="40" fg:w="1"/><text x="75.7217%" y="671.50">`..</text></g><g><title>`0x7FFED920ECA8 (1 samples, 1.89%)</title><rect x="75.4717%" y="645" width="1.8868%" height="15" fill="rgb(234,177,6)" fg:x="40" fg:w="1"/><text x="75.7217%" y="655.50">`..</text></g><g><title>`0x7FFED9248851 (1 samples, 1.89%)</title><rect x="75.4717%" y="629" width="1.8868%" height="15" fill="rgb(217,24,9)" fg:x="40" fg:w="1"/><text x="75.7217%" y="639.50">`..</text></g><g><title>`0x7FFED924893F (1 samples, 1.89%)</title><rect x="75.4717%" y="613" width="1.8868%" height="15" fill="rgb(220,13,46)" fg:x="40" fg:w="1"/><text x="75.7217%" y="623.50">`..</text></g><g><title>`0x7FFED92489F1 (1 samples, 1.89%)</title><rect x="75.4717%" y="597" width="1.8868%" height="15" fill="rgb(239,221,27)" fg:x="40" fg:w="1"/><text x="75.7217%" y="607.50">`..</text></g><g><title>`0x7FFED921C744 (1 samples, 1.89%)</title><rect x="77.3585%" y="613" width="1.8868%" height="15" fill="rgb(222,198,25)" fg:x="41" fg:w="1"/><text x="77.6085%" y="623.50">`..</text></g><g><title>`0x7FFED921C5BA (1 samples, 1.89%)</title><rect x="77.3585%" y="597" width="1.8868%" height="15" fill="rgb(211,99,13)" fg:x="41" fg:w="1"/><text x="77.6085%" y="607.50">`..</text></g><g><title>`0x7FFED921C9BC (1 samples, 1.89%)</title><rect x="77.3585%" y="581" width="1.8868%" height="15" fill="rgb(232,111,31)" fg:x="41" fg:w="1"/><text x="77.6085%" y="591.50">`..</text></g><g><title>`0x7FFED92908A4 (1 samples, 1.89%)</title><rect x="77.3585%" y="565" width="1.8868%" height="15" fill="rgb(245,82,37)" fg:x="41" fg:w="1"/><text x="77.6085%" y="575.50">`..</text></g><g><title>`0x7FFED9218DA6 (3 samples, 5.66%)</title><rect x="77.3585%" y="661" width="5.6604%" height="15" fill="rgb(227,149,46)" fg:x="41" fg:w="3"/><text x="77.6085%" y="671.50">`0x7FFE..</text></g><g><title>`0x7FFED921E299 (3 samples, 5.66%)</title><rect x="77.3585%" y="645" width="5.6604%" height="15" fill="rgb(218,36,50)" fg:x="41" fg:w="3"/><text x="77.6085%" y="655.50">`0x7FFE..</text></g><g><title>`0x7FFED921D319 (3 samples, 5.66%)</title><rect x="77.3585%" y="629" width="5.6604%" height="15" fill="rgb(226,80,48)" fg:x="41" fg:w="3"/><text x="77.6085%" y="639.50">`0x7FFE..</text></g><g><title>`0x7FFED921C8E8 (2 samples, 3.77%)</title><rect x="79.2453%" y="613" width="3.7736%" height="15" fill="rgb(238,224,15)" fg:x="42" fg:w="2"/><text x="79.4953%" y="623.50">`0x7..</text></g><g><title>`0x7FFED9214C64 (2 samples, 3.77%)</title><rect x="79.2453%" y="597" width="3.7736%" height="15" fill="rgb(241,136,10)" fg:x="42" fg:w="2"/><text x="79.4953%" y="607.50">`0x7..</text></g><g><title>`0x7FFED921415C (2 samples, 3.77%)</title><rect x="79.2453%" y="581" width="3.7736%" height="15" fill="rgb(208,32,45)" fg:x="42" fg:w="2"/><text x="79.4953%" y="591.50">`0x7..</text></g><g><title>`0x7FFED68823AF (1 samples, 1.89%)</title><rect x="83.0189%" y="549" width="1.8868%" height="15" fill="rgb(207,135,9)" fg:x="44" fg:w="1"/><text x="83.2689%" y="559.50">`..</text></g><g><title>`0x7FFED6883782 (1 samples, 1.89%)</title><rect x="83.0189%" y="533" width="1.8868%" height="15" fill="rgb(206,86,44)" fg:x="44" fg:w="1"/><text x="83.2689%" y="543.50">`..</text></g><g><title>`0x7FFED923B4D2 (1 samples, 1.89%)</title><rect x="83.0189%" y="517" width="1.8868%" height="15" fill="rgb(245,177,15)" fg:x="44" fg:w="1"/><text x="83.2689%" y="527.50">`..</text></g><g><title>`0x7FFED923B28D (1 samples, 1.89%)</title><rect x="83.0189%" y="501" width="1.8868%" height="15" fill="rgb(206,64,50)" fg:x="44" fg:w="1"/><text x="83.2689%" y="511.50">`..</text></g><g><title>`0x7FFED92917D4 (1 samples, 1.89%)</title><rect x="83.0189%" y="485" width="1.8868%" height="15" fill="rgb(234,36,40)" fg:x="44" fg:w="1"/><text x="83.2689%" y="495.50">`..</text></g><g><title>`0x7FFED688201D (2 samples, 3.77%)</title><rect x="83.0189%" y="565" width="3.7736%" height="15" fill="rgb(213,64,8)" fg:x="44" fg:w="2"/><text x="83.2689%" y="575.50">`0x7..</text></g><g><title>`0x7FFED68825C7 (1 samples, 1.89%)</title><rect x="84.9057%" y="549" width="1.8868%" height="15" fill="rgb(210,75,36)" fg:x="45" fg:w="1"/><text x="85.1557%" y="559.50">`..</text></g><g><title>`0x7FFED688173C (1 samples, 1.89%)</title><rect x="84.9057%" y="533" width="1.8868%" height="15" fill="rgb(229,88,21)" fg:x="45" fg:w="1"/><text x="85.1557%" y="543.50">`..</text></g><g><title>`0x7FFED688120C (1 samples, 1.89%)</title><rect x="84.9057%" y="517" width="1.8868%" height="15" fill="rgb(252,204,47)" fg:x="45" fg:w="1"/><text x="85.1557%" y="527.50">`..</text></g><g><title>`0x7FFED688110B (1 samples, 1.89%)</title><rect x="84.9057%" y="501" width="1.8868%" height="15" fill="rgb(208,77,27)" fg:x="45" fg:w="1"/><text x="85.1557%" y="511.50">`..</text></g><g><title>`0x7FFED6880B11 (1 samples, 1.89%)</title><rect x="84.9057%" y="485" width="1.8868%" height="15" fill="rgb(221,76,26)" fg:x="45" fg:w="1"/><text x="85.1557%" y="495.50">`..</text></g><g><title>`0x7FFED6880BD2 (1 samples, 1.89%)</title><rect x="84.9057%" y="469" width="1.8868%" height="15" fill="rgb(225,139,18)" fg:x="45" fg:w="1"/><text x="85.1557%" y="479.50">`..</text></g><g><title>`0x7FFED6876765 (1 samples, 1.89%)</title><rect x="84.9057%" y="453" width="1.8868%" height="15" fill="rgb(230,137,11)" fg:x="45" fg:w="1"/><text x="85.1557%" y="463.50">`..</text></g><g><title>`0x7FFED92CE973 (6 samples, 11.32%)</title><rect x="77.3585%" y="709" width="11.3208%" height="15" fill="rgb(212,28,1)" fg:x="41" fg:w="6"/><text x="77.6085%" y="719.50">`0x7FFED92CE973</text></g><g><title>`0x7FFED921A74A (6 samples, 11.32%)</title><rect x="77.3585%" y="693" width="11.3208%" height="15" fill="rgb(248,164,17)" fg:x="41" fg:w="6"/><text x="77.6085%" y="703.50">`0x7FFED921A74A</text></g><g><title>`0x7FFED92090CC (6 samples, 11.32%)</title><rect x="77.3585%" y="677" width="11.3208%" height="15" fill="rgb(222,171,42)" fg:x="41" fg:w="6"/><text x="77.6085%" y="687.50">`0x7FFED92090CC</text></g><g><title>`0x7FFED9218E30 (3 samples, 5.66%)</title><rect x="83.0189%" y="661" width="5.6604%" height="15" fill="rgb(243,84,45)" fg:x="44" fg:w="3"/><text x="83.2689%" y="671.50">`0x7FFE..</text></g><g><title>`0x7FFED921DB1D (3 samples, 5.66%)</title><rect x="83.0189%" y="645" width="5.6604%" height="15" fill="rgb(252,49,23)" fg:x="44" fg:w="3"/><text x="83.2689%" y="655.50">`0x7FFE..</text></g><g><title>`0x7FFED925D460 (3 samples, 5.66%)</title><rect x="83.0189%" y="629" width="5.6604%" height="15" fill="rgb(215,19,7)" fg:x="44" fg:w="3"/><text x="83.2689%" y="639.50">`0x7FFE..</text></g><g><title>`0x7FFED925D3EE (3 samples, 5.66%)</title><rect x="83.0189%" y="613" width="5.6604%" height="15" fill="rgb(238,81,41)" fg:x="44" fg:w="3"/><text x="83.2689%" y="623.50">`0x7FFE..</text></g><g><title>`0x7FFED925D63D (3 samples, 5.66%)</title><rect x="83.0189%" y="597" width="5.6604%" height="15" fill="rgb(210,199,37)" fg:x="44" fg:w="3"/><text x="83.2689%" y="607.50">`0x7FFE..</text></g><g><title>`0x7FFED9218B8F (3 samples, 5.66%)</title><rect x="83.0189%" y="581" width="5.6604%" height="15" fill="rgb(244,192,49)" fg:x="44" fg:w="3"/><text x="83.2689%" y="591.50">`0x7FFE..</text></g><g><title>`0x7FFED688208D (1 samples, 1.89%)</title><rect x="86.7925%" y="565" width="1.8868%" height="15" fill="rgb(226,211,11)" fg:x="46" fg:w="1"/><text x="87.0425%" y="575.50">`..</text></g><g><title>`0x7FFED6882C1D (1 samples, 1.89%)</title><rect x="86.7925%" y="549" width="1.8868%" height="15" fill="rgb(236,162,54)" fg:x="46" fg:w="1"/><text x="87.0425%" y="559.50">`..</text></g><g><title>`0x7FFED68F492A (1 samples, 1.89%)</title><rect x="86.7925%" y="533" width="1.8868%" height="15" fill="rgb(220,229,9)" fg:x="46" fg:w="1"/><text x="87.0425%" y="543.50">`..</text></g><g><title>`0x7FFED6881B31 (1 samples, 1.89%)</title><rect x="86.7925%" y="517" width="1.8868%" height="15" fill="rgb(250,87,22)" fg:x="46" fg:w="1"/><text x="87.0425%" y="527.50">`..</text></g><g><title>`0x7FFED6881E84 (1 samples, 1.89%)</title><rect x="86.7925%" y="501" width="1.8868%" height="15" fill="rgb(239,43,17)" fg:x="46" fg:w="1"/><text x="87.0425%" y="511.50">`..</text></g><g><title>`0x7FFED6883954 (1 samples, 1.89%)</title><rect x="86.7925%" y="485" width="1.8868%" height="15" fill="rgb(231,177,25)" fg:x="46" fg:w="1"/><text x="87.0425%" y="495.50">`..</text></g><g><title>`0x7FFED687E9A4 (1 samples, 1.89%)</title><rect x="86.7925%" y="469" width="1.8868%" height="15" fill="rgb(219,179,1)" fg:x="46" fg:w="1"/><text x="87.0425%" y="479.50">`..</text></g><g><title>`0x7FFED92CE9AC (1 samples, 1.89%)</title><rect x="88.6792%" y="709" width="1.8868%" height="15" fill="rgb(238,219,53)" fg:x="47" fg:w="1"/><text x="88.9292%" y="719.50">`..</text></g><g><title>`0x7FFED92121B0 (1 samples, 1.89%)</title><rect x="88.6792%" y="693" width="1.8868%" height="15" fill="rgb(232,167,36)" fg:x="47" fg:w="1"/><text x="88.9292%" y="703.50">`..</text></g><g><title>`0x7FFED921293B (1 samples, 1.89%)</title><rect x="88.6792%" y="677" width="1.8868%" height="15" fill="rgb(244,19,51)" fg:x="47" fg:w="1"/><text x="88.9292%" y="687.50">`..</text></g><g><title>`0x7FFED9212D96 (1 samples, 1.89%)</title><rect x="88.6792%" y="661" width="1.8868%" height="15" fill="rgb(224,6,22)" fg:x="47" fg:w="1"/><text x="88.9292%" y="671.50">`..</text></g><g><title>`0x7FFED92CEC3D (1 samples, 1.89%)</title><rect x="90.5660%" y="709" width="1.8868%" height="15" fill="rgb(224,145,5)" fg:x="48" fg:w="1"/><text x="90.8160%" y="719.50">`..</text></g><g><title>`0x7FFED923B5FD (1 samples, 1.89%)</title><rect x="90.5660%" y="693" width="1.8868%" height="15" fill="rgb(234,130,49)" fg:x="48" fg:w="1"/><text x="90.8160%" y="703.50">`..</text></g><g><title>`0x7FFED923C280 (1 samples, 1.89%)</title><rect x="90.5660%" y="677" width="1.8868%" height="15" fill="rgb(254,6,2)" fg:x="48" fg:w="1"/><text x="90.8160%" y="687.50">`..</text></g><g><title>`0x7FFED9291DF4 (1 samples, 1.89%)</title><rect x="90.5660%" y="661" width="1.8868%" height="15" fill="rgb(208,96,46)" fg:x="48" fg:w="1"/><text x="90.8160%" y="671.50">`..</text></g><g><title>`0x7FFED92CECA3 (1 samples, 1.89%)</title><rect x="92.4528%" y="709" width="1.8868%" height="15" fill="rgb(239,3,39)" fg:x="49" fg:w="1"/><text x="92.7028%" y="719.50">`..</text></g><g><title>`0x7FFED9214BAB (1 samples, 1.89%)</title><rect x="92.4528%" y="693" width="1.8868%" height="15" fill="rgb(233,210,1)" fg:x="49" fg:w="1"/><text x="92.7028%" y="703.50">`..</text></g><g><title>`0x7FFED9214DF6 (1 samples, 1.89%)</title><rect x="92.4528%" y="677" width="1.8868%" height="15" fill="rgb(244,137,37)" fg:x="49" fg:w="1"/><text x="92.7028%" y="687.50">`..</text></g><g><title>`0x7FFED9215DB4 (1 samples, 1.89%)</title><rect x="92.4528%" y="661" width="1.8868%" height="15" fill="rgb(240,136,2)" fg:x="49" fg:w="1"/><text x="92.7028%" y="671.50">`..</text></g><g><title>`0x7FFED921D319 (1 samples, 1.89%)</title><rect x="92.4528%" y="645" width="1.8868%" height="15" fill="rgb(239,18,37)" fg:x="49" fg:w="1"/><text x="92.7028%" y="655.50">`..</text></g><g><title>`0x7FFED921C889 (1 samples, 1.89%)</title><rect x="92.4528%" y="629" width="1.8868%" height="15" fill="rgb(218,185,22)" fg:x="49" fg:w="1"/><text x="92.7028%" y="639.50">`..</text></g><g><title>`0x7FFED921B49C (1 samples, 1.89%)</title><rect x="92.4528%" y="613" width="1.8868%" height="15" fill="rgb(225,218,4)" fg:x="49" fg:w="1"/><text x="92.7028%" y="623.50">`..</text></g><g><title>`0x7FFED921C11F (1 samples, 1.89%)</title><rect x="92.4528%" y="597" width="1.8868%" height="15" fill="rgb(230,182,32)" fg:x="49" fg:w="1"/><text x="92.7028%" y="607.50">`..</text></g><g><title>`0x7FFED9222E34 (1 samples, 1.89%)</title><rect x="92.4528%" y="581" width="1.8868%" height="15" fill="rgb(242,56,43)" fg:x="49" fg:w="1"/><text x="92.7028%" y="591.50">`..</text></g><g><title>`0x7FFED9222DA2 (1 samples, 1.89%)</title><rect x="92.4528%" y="565" width="1.8868%" height="15" fill="rgb(233,99,24)" fg:x="49" fg:w="1"/><text x="92.7028%" y="575.50">`..</text></g><g><title>`0x7FFED9290DA4 (1 samples, 1.89%)</title><rect x="92.4528%" y="549" width="1.8868%" height="15" fill="rgb(234,209,42)" fg:x="49" fg:w="1"/><text x="92.7028%" y="559.50">`..</text></g><g><title>`0x7FFED92CED8F (1 samples, 1.89%)</title><rect x="94.3396%" y="709" width="1.8868%" height="15" fill="rgb(227,7,12)" fg:x="50" fg:w="1"/><text x="94.5896%" y="719.50">`..</text></g><g><title>`0x7FFED9290564 (1 samples, 1.89%)</title><rect x="94.3396%" y="693" width="1.8868%" height="15" fill="rgb(245,203,43)" fg:x="50" fg:w="1"/><text x="94.5896%" y="703.50">`..</text></g><g><title>`0x7FFED92644E3 (13 samples, 24.53%)</title><rect x="73.5849%" y="741" width="24.5283%" height="15" fill="rgb(238,205,33)" fg:x="39" fg:w="13"/><text x="73.8349%" y="751.50">`0x7FFED92644E3</text></g><g><title>`0x7FFED92BAAD6 (13 samples, 24.53%)</title><rect x="73.5849%" y="725" width="24.5283%" height="15" fill="rgb(231,56,7)" fg:x="39" fg:w="13"/><text x="73.8349%" y="735.50">`0x7FFED92BAAD6</text></g><g><title>`0x7FFED92CEE29 (1 samples, 1.89%)</title><rect x="96.2264%" y="709" width="1.8868%" height="15" fill="rgb(244,186,29)" fg:x="51" fg:w="1"/><text x="96.4764%" y="719.50">`..</text></g><g><title>`0x7FFED925D460 (1 samples, 1.89%)</title><rect x="96.2264%" y="693" width="1.8868%" height="15" fill="rgb(234,111,31)" fg:x="51" fg:w="1"/><text x="96.4764%" y="703.50">`..</text></g><g><title>`0x7FFED925D460 (1 samples, 1.89%)</title><rect x="96.2264%" y="677" width="1.8868%" height="15" fill="rgb(241,149,10)" fg:x="51" fg:w="1"/><text x="96.4764%" y="687.50">`..</text></g><g><title>`0x7FFED925D3EE (1 samples, 1.89%)</title><rect x="96.2264%" y="661" width="1.8868%" height="15" fill="rgb(249,206,44)" fg:x="51" fg:w="1"/><text x="96.4764%" y="671.50">`..</text></g><g><title>`0x7FFED925D63D (1 samples, 1.89%)</title><rect x="96.2264%" y="645" width="1.8868%" height="15" fill="rgb(251,153,30)" fg:x="51" fg:w="1"/><text x="96.4764%" y="655.50">`..</text></g><g><title>`0x7FFED9218B8F (1 samples, 1.89%)</title><rect x="96.2264%" y="629" width="1.8868%" height="15" fill="rgb(239,152,38)" fg:x="51" fg:w="1"/><text x="96.4764%" y="639.50">`..</text></g><g><title>`0x7FFED6C176B3 (1 samples, 1.89%)</title><rect x="96.2264%" y="613" width="1.8868%" height="15" fill="rgb(249,139,47)" fg:x="51" fg:w="1"/><text x="96.4764%" y="623.50">`..</text></g><g><title>`0x7FFED6C17FCA (1 samples, 1.89%)</title><rect x="96.2264%" y="597" width="1.8868%" height="15" fill="rgb(244,64,35)" fg:x="51" fg:w="1"/><text x="96.4764%" y="607.50">`..</text></g><g><title>`0x7FFED6C063E4 (1 samples, 1.89%)</title><rect x="96.2264%" y="581" width="1.8868%" height="15" fill="rgb(216,46,15)" fg:x="51" fg:w="1"/><text x="96.4764%" y="591.50">`..</text></g><g><title>`0x7FFED6C0656F (1 samples, 1.89%)</title><rect x="96.2264%" y="565" width="1.8868%" height="15" fill="rgb(250,74,19)" fg:x="51" fg:w="1"/><text x="96.4764%" y="575.50">`..</text></g><g><title>`0x7FFED6C067E1 (1 samples, 1.89%)</title><rect x="96.2264%" y="549" width="1.8868%" height="15" fill="rgb(249,42,33)" fg:x="51" fg:w="1"/><text x="96.4764%" y="559.50">`..</text></g><g><title>`0x7FFED6C0818A (1 samples, 1.89%)</title><rect x="96.2264%" y="533" width="1.8868%" height="15" fill="rgb(242,149,17)" fg:x="51" fg:w="1"/><text x="96.4764%" y="543.50">`..</text></g><g><title>`0x7FFED6C083B9 (1 samples, 1.89%)</title><rect x="96.2264%" y="517" width="1.8868%" height="15" fill="rgb(244,29,21)" fg:x="51" fg:w="1"/><text x="96.4764%" y="527.50">`..</text></g><g><title>`0x7FFED688AA33 (1 samples, 1.89%)</title><rect x="96.2264%" y="501" width="1.8868%" height="15" fill="rgb(220,130,37)" fg:x="51" fg:w="1"/><text x="96.4764%" y="511.50">`..</text></g><g><title>all (53 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(211,67,2)" fg:x="0" fg:w="53"/><text x="0.2500%" y="783.50"></text></g><g><title>`0x7FFED926440E (14 samples, 26.42%)</title><rect x="73.5849%" y="757" width="26.4151%" height="15" fill="rgb(235,68,52)" fg:x="39" fg:w="14"/><text x="73.8349%" y="767.50">`0x7FFED926440E</text></g><g><title>`0x7FFED929E3F3 (1 samples, 1.89%)</title><rect x="98.1132%" y="741" width="1.8868%" height="15" fill="rgb(246,142,3)" fg:x="52" fg:w="1"/><text x="98.3632%" y="751.50">`..</text></g><g><title>`0x7FFED929EB8D (1 samples, 1.89%)</title><rect x="98.1132%" y="725" width="1.8868%" height="15" fill="rgb(241,25,7)" fg:x="52" fg:w="1"/><text x="98.3632%" y="735.50">`..</text></g><g><title>`0x7FFED921B6ED (1 samples, 1.89%)</title><rect x="98.1132%" y="709" width="1.8868%" height="15" fill="rgb(242,119,39)" fg:x="52" fg:w="1"/><text x="98.3632%" y="719.50">`..</text></g></svg></svg>